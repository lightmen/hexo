{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"97df99c83f7d0fc1a0165bf4c8400be4038e7e28","modified":1490451283000},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1489903812000},{"_id":"themes/jacman/README.md","hash":"75a5c9fbd7c9cec4d2f277042d2fee550e4936be","modified":1489903812000},{"_id":"themes/jacman/README_zh.md","hash":"d6014b16eaccc97dc54a7779c9e36003752410e1","modified":1489903812000},{"_id":"themes/jacman/.DS_Store","hash":"9484e722669a12994ca12fe2f5873ed0452ef8e9","modified":1490105974000},{"_id":"source/_posts/.DS_Store","hash":"dd32155e3055a47be3798630c3b89de9394d4d67","modified":1490449785000},{"_id":"themes/jacman/_config.yml","hash":"9031de1be6acd3334f1304864471b8a1597843bd","modified":1490108493000},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1489903812000},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1489903812000},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1489903812000},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1489903812000},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1489903812000},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1489903812000},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1489903812000},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1489903812000},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1489903812000},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1489903812000},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1489903812000},{"_id":"themes/jacman/source/.DS_Store","hash":"1e0a666402041c1f380f92e1d9e3828749bcb7a9","modified":1490105967000},{"_id":"source/_posts/Hexo/Hexo主题添加评论模块.md","hash":"71f8c9757ec4ff1e6aca7904237409f6695f663e","modified":1489929036000},{"_id":"source/_posts/Hexo/Hexo + Github Pages搭建个人博客.md","hash":"f9200512e1fc17a96dd8e89d9ecdd1434c1972b8","modified":1489927053000},{"_id":"source/_posts/SD卡/深入理解SD卡-协议.md","hash":"dbf1703a7c6d597e6a5d32fb58cedc895561ff5d","modified":1490450241000},{"_id":"source/_posts/SD卡/.DS_Store","hash":"968bc3a9da2de7fbba02176b10147a3035b52d1f","modified":1490102203000},{"_id":"source/about/index.md","hash":"1866cae7eede5b8c1e5ea408035d615f6b37dd29","modified":1489918395000},{"_id":"source/_posts/Leetcode/.DS_Store","hash":"f3587a073b8d1f395cfb01947c7c810f41d23c43","modified":1490021320000},{"_id":"source/_posts/Hexo/.DS_Store","hash":"04c58ce53aa1b732048f1b612022d36691e6d977","modified":1490095324000},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1489903812000},{"_id":"source/_posts/Leetcode/add-binary.md","hash":"131a014e3dd333e074b03b411717a1d51228149a","modified":1490028851000},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1489903812000},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1489903812000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1489903812000},{"_id":"source/_posts/Leetcode/assign-cookies.md","hash":"aa288843c18d146d91c6497a1858708b93c08828","modified":1490028841000},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1489903812000},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1489903812000},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1489903812000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1489903812000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"5f80bf6c6ddcf8c28c4599cd1540b14b25d54f18","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1489903812000},{"_id":"themes/jacman/source/css/.DS_Store","hash":"38f945fbe067f640a59c214936716a28b43168c0","modified":1490105747000},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1489903812000},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1489903812000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1489903812000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1489903812000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1489903812000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1489903812000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1489903812000},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1489903812000},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1489903812000},{"_id":"themes/jacman/source/img/.DS_Store","hash":"1847da6de13d1a693e9e880a104db3047ec3df32","modified":1489903812000},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1489903812000},{"_id":"themes/jacman/source/img/author.jpg","hash":"53764035a546d8b305175ca960f4e9106bd1cecb","modified":1489903812000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1489903812000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1489903812000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1489903812000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1489903812000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1489903812000},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1489903812000},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1489903812000},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1489903812000},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1489903812000},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1489903812000},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1489903812000},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1489903812000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1489903812000},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1489903812000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1489903812000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1489903812000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1489903812000},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1489903812000},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1489903812000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1489903812000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1489903812000},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1489903812000},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1489903812000},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1489903812000},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489903812000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1489903812000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1489903812000},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1489903812000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1489903812000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1489903812000},{"_id":"public/about/index.html","hash":"8aa59334836137d8346cd8965010414bbdb74b87","modified":1490108521406},{"_id":"public/categories/Hexo/index.html","hash":"76d520e30755f99691184758e4401d5cf8089f06","modified":1490108521407},{"_id":"public/categories/SD卡/index.html","hash":"0fb440c41d9cffe347c32c3ccb44cf2d8c911ffd","modified":1490183746254},{"_id":"public/categories/Leetcode/index.html","hash":"af3ad1e39d90174cf11a55bef55277ee5b8d7e49","modified":1490108521408},{"_id":"public/tags/Hexo/index.html","hash":"7d1d8e0103c6024a6487932ec9f40ef54d9b1be9","modified":1490450341568},{"_id":"public/tags/SD卡协议/index.html","hash":"98c93698480924e9b22159d95a2132c4fa8081a5","modified":1490183808754},{"_id":"public/tags/Linux/index.html","hash":"6b3cc7c6c17acfb63d0e74d31e1769bd78abee08","modified":1490183638258},{"_id":"public/tags/内核/index.html","hash":"d8795a35c5b46d04b746089c77e39e9000f8e942","modified":1490108521408},{"_id":"public/tags/Leetcode/index.html","hash":"cb7bab25f4b6e9dd816d359afb98a21ad9fc8424","modified":1490108521408},{"_id":"public/tags/C-C/index.html","hash":"c39f075387f6d8c8b3f67778b8490164a69f7936","modified":1490108521410},{"_id":"public/tags/Python/index.html","hash":"9b8bb93c2a4e98eee1b027ea9e600803e97cb78b","modified":1490108521410},{"_id":"public/tags/Algorithm/index.html","hash":"d7e061ca3624bb1aec8b9a08bbece6aed0ca7cf6","modified":1490108521412},{"_id":"public/tags/贪心算法/index.html","hash":"9d8097cfa61c566ce0746244231feec17bb9be8a","modified":1490108521413},{"_id":"public/archives/index.html","hash":"15fa8e37c54fef529f771370dc66f255929631f0","modified":1490451561656},{"_id":"public/archives/2017/index.html","hash":"73e3096d536f632115f96d21d5f38c43a680e3f6","modified":1490451561656},{"_id":"public/archives/2017/03/index.html","hash":"600698b079293df2fddb28d1e42df21cf6471ce8","modified":1490451561657},{"_id":"public/index.html","hash":"16ffd20629e589316126dd198cb90cb88a4ce633","modified":1490451561657},{"_id":"public/2017/03/21/SD卡/深入理解SD卡-协议/index.html","hash":"47fd26e55339fa5b4caf5a030b77de9ad305fb4a","modified":1490451561657},{"_id":"public/2017/03/21/Leetcode/assign-cookies/index.html","hash":"9e74cf0f48c67d1aa632a3b5633f782a660223bd","modified":1490451561657},{"_id":"public/2017/03/20/Leetcode/add-binary/index.html","hash":"50ffd5c70973b5a911e6e7bbd213c1fc1743ee95","modified":1490451561658},{"_id":"public/2017/03/19/Hexo/Hexo主题添加评论模块/index.html","hash":"19cb1ae491949d74b776dae553fc192357112bad","modified":1490183808756},{"_id":"public/2017/03/19/Hexo/Hexo + Github Pages搭建个人博客/index.html","hash":"c8294ebab5a7118d7677751686d7048128938ed1","modified":1490183808756},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1490104848380},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1490104848380},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1490104848380},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1490104848380},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1490104848380},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1490104848381},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1490104848381},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1490104848381},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1490104848381},{"_id":"public/img/author.jpg","hash":"53764035a546d8b305175ca960f4e9106bd1cecb","modified":1490104848381},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1490104848382},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1490104848382},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1490104848382},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1490104848382},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1490104848382},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1490104848382},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1490104848382},{"_id":"public/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1490104848382},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1490104848382},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1490104848383},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1490104848383},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490104848383},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490104848383},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490104848383},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490104848383},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490104848384},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490104848384},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490104848384},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1490104850507},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1490104850515},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1490104850517},{"_id":"public/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1490104850517},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1490104850523},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1490104850523},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1490104850523},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1490104850523},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1490104850523},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490104850523},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1490104850523},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490104850523},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1490104850524},{"_id":"public/css/style.css","hash":"1737965b2ad2e4999c93bfa7657bdfc9990675f3","modified":1490104850524},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1490104850524},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1490104850524},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1490104850524},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1490104850524},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1490104850528},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1490104850528},{"_id":"source/_posts/Hexo/Markdown图片居中的方法.md","hash":"88e3974659c408286742d4077a541a3eacd88fdd","modified":1490107730000},{"_id":"public/tags/Markdown/index.html","hash":"7f375d85fb9d3d4e52cbe62425fcbacf8a301557","modified":1490450341568},{"_id":"public/2017/03/21/Hexo/Markdown图片居中的方法/index.html","hash":"2db05e9014f6d9131edc6a854e5bc0ac8ed23a2e","modified":1490183808755},{"_id":"source/_posts/kernel/linux kernel中读写文件.md","hash":"7ee0d8a34b0af8267cf569af7a4320dbb80c0f5e","modified":1490184092000},{"_id":"public/2017/03/22/kernel/linux kernel中读写文件/index.html","hash":"3f41644ea5f439b98482e4bd9c8d5d04de33907c","modified":1490451561657},{"_id":"public/tags/kernel/index.html","hash":"acabceccbfc8276df4114fdbc4468f0f352ab0c8","modified":1490183638316},{"_id":"public/categories/kernel/index.html","hash":"d3b975f4d8788fb9dda341e3df48e19f269967e3","modified":1490183746266},{"_id":"public/tags/文件系统/index.html","hash":"0c1f16bece373e6bbdd5a9fdd55cf7f8509cc476","modified":1490183808773},{"_id":"source/_posts/环境搭建/Hexo + Github Pages搭建个人博客.md","hash":"04c0855361dd4399d8b5648ebb6d55180677d80d","modified":1490449767000},{"_id":"source/_posts/环境搭建/Hexo主题添加评论模块.md","hash":"42cd681f9711233bf642655b54b80fce2897cece","modified":1490449775000},{"_id":"source/_posts/环境搭建/.DS_Store","hash":"04c58ce53aa1b732048f1b612022d36691e6d977","modified":1490095324000},{"_id":"source/_posts/环境搭建/Markdown图片居中的方法.md","hash":"9cc1086b27667a0832f36cac3fafb5c4cdd2e495","modified":1490449750000},{"_id":"public/2017/03/21/环境搭建/Markdown图片居中的方法/index.html","hash":"ef3e1bbf07be81843020a8fcb67fcf1be3ac8b83","modified":1490451561657},{"_id":"public/2017/03/19/环境搭建/Hexo主题添加评论模块/index.html","hash":"4276b9ac17530de6a4037757882c79016bb501e9","modified":1490451561658},{"_id":"public/2017/03/19/环境搭建/Hexo + Github Pages搭建个人博客/index.html","hash":"339b2f6cfc9dbe944e844186d0a54791763fec7f","modified":1490451561659},{"_id":"public/categories/环境搭建/index.html","hash":"eb0d80a33f6d6dbcef8a426095e0164a53ecb205","modified":1490450341602},{"_id":"source/_posts/本地挂载android ext4镜像.md","hash":"4ebe23586fbf8f3df6921615c20966d657c15986","modified":1490451543000},{"_id":"public/2017/03/25/本地挂载android ext4镜像/index.html","hash":"a957aff22e7cd7b0ddb433f7a7fea218fd3b5de4","modified":1490451561696},{"_id":"public/tags/ext4/index.html","hash":"f4e63dc17d6696411f03b029dcc225808282cee5","modified":1490451561696},{"_id":"public/tags/android/index.html","hash":"c80f81888042a721265d8a6021be3d5bab9d37cf","modified":1490451561696}],"Category":[{"name":"Hexo","_id":"cj0jly9wl0003sdrrik0jpydl"},{"name":"SD卡","_id":"cj0jly9wy000asdrr2l047d7x"},{"name":"Leetcode","_id":"cj0jly9y9000msdrrvzo129q6"},{"name":"kernel","_id":"cj0kwxciq0000q6rrk2nkydm4"},{"name":"环境搭建","_id":"cj0pbne7m0002enrr2i3ygiqq"}],"Data":[],"Page":[{"title":"关于我","date":"2017-03-19T07:38:00.000Z","_content":"\nauthor: lightmen\n\ngithub: [https://github.com/lightmen](https://github.com/lightmen)\n\nemail: zero_he@foxmail.com\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-03-19 15:38:00\n---\n\nauthor: lightmen\n\ngithub: [https://github.com/lightmen](https://github.com/lightmen)\n\nemail: zero_he@foxmail.com\n\n","updated":"2017-03-19T10:13:15.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0jly9we0001sdrr8unsbd7n","content":"<p>author: lightmen</p>\n<p>github: <a href=\"https://github.com/lightmen\" target=\"_blank\" rel=\"external\">https://github.com/lightmen</a></p>\n<p>email: zero_he@foxmail.com</p>\n","excerpt":"","more":"<p>author: lightmen</p>\n<p>github: <a href=\"https://github.com/lightmen\">https://github.com/lightmen</a></p>\n<p>email: zero_he@foxmail.com</p>\n"}],"Post":[{"title":"深入理解SD卡:协议","_content":"\n# Overview\n**深入理解SD卡**系列文章将介绍SD卡，涉及SD卡的协议及驱动代码。我们学习SD卡目的是为了理解SD卡的驱动代码，修改它，最终解决工作中遇到的SD卡相关的问题。本系列文章的目标是理解SD，包括协议和驱动代码。在学习任何设备驱动时，有个东西我们是无法绕过的，那就是_协议_，本文讲的就是SD卡的协议。\n\n学习SD卡协议，可以让我们更好的了解SD卡的运作机制。在最开始学习SD卡的时候，我们只需要对SD卡的协议有个大概了解，能基本满足我们看懂SD卡驱动代码就行。如果之后在阅读SD卡驱动代码有不理解的地方，可以回过头来翻翻SD协议文档。建议在读SD驱动源码和学习SD卡协议之间交替进行，互相验证。\n\n关于SD卡，有个叫SD卡协会的组织，这个组织规定了各种涉及SD卡的协议，并发布协议文档。这些SD卡协议文档，最重要的有两种文档：SD Specifications Part 1 Physical Layer Simplified Specification 和SD Specifications Part A2 SD Host Controller Simplified Specification。\n\n个人理解，定协议的目的就是为了使某个事物标准化，标准化后，可以方便大家协作，简化工作量，提高效率，避免重复工作导致的浪费。Physical Layer Simplified Specification（以下简称：卡协议）规定了SD卡的物理规格和SD卡使用的命令协议，像Sandisk、Kingston这类SD卡制造商必须遵守该协议。假设Sandisk开发了一款SD卡没有遵循该协议，而是自己内部新搞了一套协议，这样市面上就没有设备能使用该款SD卡。除非有人专门开发一个驱动去适配该款SD卡，但是这样很浪费人力。如果每个SD卡厂商都使用自己的协议，那么每支持一款SD卡，都需要重新写一套代码去适配它，那这工作量就很恐怖了。\n\n类似的，SD Host Controller Simplified Specification（以下简称：主机协议）用来标准化SD主机控制器，针对的是SD卡主机控制器厂商。这个协议不是强制的，在我们阅读SD驱动代码的时候，如果涉及到SD卡主机控制的代码，我们可能需要翻一下这篇文档，或者查阅SD卡主机控制器厂商提供给我们的文档（一般都是各大cpu芯片厂商提供给我们开发者文档）。\n\n本文的讲解的是卡协议，接下来，会有一些的英文夹杂在中文里面，因为有些名词，还是原汁原味的好，我翻译出来，没了那种韵味，水平有限，望大家谅解。\n\n# System Features\n本大章节讲解SD的一些基本特征，包括SD卡的物理规格、容量、速度等方面。\n\n##Form-factor\n目前市面上按物理规格来看，常见的SD卡有三种：\n\n- 标准的SD卡，这种卡比较大，在有些相机或者PC电脑上会使用；\n- 第二种是miniSD，这种卡我没怎么使用，不作详述；\n- 最后一种是叫TF卡，也称mirco SD，这种卡比较小，是我们最常接触的，像我们的手机里面使用的就是这种卡。很多人基本上都管我们手机使用的那种卡叫SD卡，这样的叫法实际上不够准确，更准确应该是叫TF卡，但是不管怎样，都没人会去计较，能理解就行。\n\n本文中，如果我说SD卡，都是泛指这三类SD卡，除非特意说明。并且如果特指，我会使用标准SD卡或者TF卡等名称代替。\n\n## Capacity of Memory\nSD卡按容量(Capacity)分类，可以分为标准容量卡、高容量卡，扩展容量卡，详细如下：\n> 1. Standard Capacity SD Memory Card (SDSC): 这种卡容量小于等于2GB \n> 2. High Capacity SD Memory Card (SDHC): 这种卡容量大于2GB，小于等于32GB\n> 3. Extended Capacity SD Memory Card (SDXC)：这种卡容量大于32GB， 小于等于2TB\n\n如果你买了一张16G或者32G的SD卡，你会发现SD卡上面印有\"HC\"字样，代表该卡是SDHC卡，同理，64G的SD卡上面印着\"XC\"，表示SDXC卡。\n\n## Voltage range\nSD卡按供电范围划分，分两种：\n> 1. High Voltage SD Memory Card: 操作的电压范围在2.7-3.6V\n> 2. UHS-II SD Memory Card： 操作的电压范围VDD1: 2.7-3.6V, VDD2: 1.70-1.95V\n\nUHS-II类型的卡参考协议文档： SD Specifications Part 1 UHS-II Simplified Addendum\n \n## Bus Speed Mode (using 4 parallel data lines)\nSD卡按总线速度模式来分，有下面几种：\n> 1. Default Speed mode: 3.3V供电模式，频率上限25MHz，速度上限 12.5MB/sec\n> 2. High Speed mode: 3.3V供电模式，频率上限50MHz，速度上限 25MB/sec\n> 3. SDR12： UHS-I卡， 1.8V供电模式，频率上限25MHz，速度上限 12.5MB/sec\n> 4. SDR25： UHS-I卡， 1.8V供电模式，频率上限50MHz，速度上限 25MB/sec\n> 5. SDR50： UHS-I卡， 1.8V供电模式，频率上限100MHz，速度上限 50MB/sec\n> 6. SDR104： UHS-I卡， 1.8V供电模式，频率上限208MHz，速度上限 104MB/sec\n> 8. DDR50： UHS-I卡， 1.8V供电模式，频率上限50MHz，性能上限 50MB/sec\n> 9. UHS156： UHS-II RCLK Frequency Range 26MHz - 52MHz, up to 1.56Gbps per lane.\n\nSDR(Single Date Rate), 一个周期只能采集一次数据，即一个bit，由于SD卡是4条数据线并行传输，所以一个周期能传输4bit，如果频率是50MHz（即1秒传输次数为50 000 000），那么1秒能传输的数据量为25MB（这里1MB为1 000 000 Byte)。所以这就是为什么各种SDR模式里面，频率上限是速度上限的两倍。而对于DDR(Double Data Rate)，在时钟上升沿和下降沿都可以采集数据，也就是单一周期内可读取或写入2次，因此4条并行数据线在一个周期内能传输8bit。\n\n## Speed Class\nSD卡按照读写性能划分，有5种规格，每种规格后面的数字象征最小的读写速度：\n\n- Class 0 - 这种卡没有性能要求\n- Class 2 - 要求在 Default Speed mode 下，性能至少要达到（大于等于） 2MB/sec\n- Class 4 - 要求在 Default Speed mode 下，性能至少要达到 4MB/sec\n- Class 6 - 要求在 Default Speed mode 下，性能至少要达到 6MB/sec\n- Class 10 - 要求在 High Speed mode 下，性能至少要达到 10MB/sec\n\n厂商卖的SD卡上面基本上都会印着一个用圆圈包围起来的数字10，表示该卡是Class 10 类型的卡。\n\n#  Bus Protocol\n在SD Bus上，有三种transaction：\n\n- **Command**: 一个命令代表着将开始一个操作。命令通过CMD线传输，方向从host到card。\n- **Response**: 响应是card对前一次host发送的命令的执行情况的反馈。也是通过CMD线传输，方向从card到host。\n- **Data**: 数据是通过4条data线传输的，方向可以从card到host，也可以从host到card。\n\n不管Command，还是Response或者Data，都开始于一个start bit （bit值0），结束于一个end bit（bit值1）。\n\n关于这块的内容不做过多解释了，详情自行阅读\"Physical Layer Simplified Specification Version 4.10\"文档 \"3.6 Bus Protocl\" 章节的内容。 \n\n# Registers \n下图是SD卡的体系架构，可以看到内部包含了一系列的寄存器：\n\n<div style=\"text-align:center\" markdown=\"1\">\n![SD Memory Card Architecture](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png)\n</div>\n\n各个寄存器的详细信息如下：\n\n![SD Memory Card Registers](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Registers.png)\n\n## OCR register\nOCR寄存器保存着SD卡的工作电压范围。如果OCR寄存器的某位为1，表示卡支持该位对应的电压。最后一位表示卡上电后的状态(是否处于”忙状态”)，如果该位为0，表示忙，如果为1，表示处于空闲状态。\n\n![OCR Register Definition](http://on61oh42c.bkt.clouddn.com/ocr.png)\n\n## CID register\nCID是一个128 bits的寄存器，该寄存器包含一个卡的标识信息。\n\n![The CID Fields](http://on61oh42c.bkt.clouddn.com/cid.png)\n\n## CSD Register\n卡的描述数据寄存器（CSD）包含了访问该卡数据时的必要配置信息，比如the data format, error correction type, maximum data access time, device size 等等。\n\n![The CSD Register Fields (CSD Version 2.0)](http://on61oh42c.bkt.clouddn.com/csd.png)\n\n## RCA register\n卡的相对地址,该16位卡地址寄存器保存了卡在识别过程中发布的地址。该地址用于在主机识别卡后，利用该地址与卡进行通信。该寄存器只有在SD模式下才有效。\n\n##  SCR register\nSD配置寄存器提供SD卡的特殊特性信息，其大小为64位。该寄存器由厂商编程，主机不能对它进行编程。\n\n![The SCR Fields](http://on61oh42c.bkt.clouddn.com/scr.png)\n\n# UHS\nUHS（Ultra High Speed）是与SDXC同时推出的SD卡总线标准。此标准适用于SDHC和SDXC。\n\nUHS-I最高传输速度（理论值）为104MB/s。英文字母I代表该设备（SD卡或读卡器）支持UHS-I接口。英文字母U，包含数目字1，代表该设备读写速度达U1。\n\nUHS-II最高传输速度达312MB/s，是UHS-I的三倍。\n\n设备（如智能手机）必须支持UHS，才能保证达到U1或U3最低写入速度。\n\n下面介绍UHS-I初始化的命令序列流程。\n\n![Command Sequence to Use UHS-I](http://on61oh42c.bkt.clouddn.com/Command-Sequence-to-Use-UHS-I.png)\n\n- 上电后，卡会处于3.3V signaling模式下。第一个CMD0命令会选择bus模式：SD模式或者SPI模式。只有在SD模式下，才能进入1.8V signaling模式。一旦卡进入1.8V signal模式，卡不能切换到SPI模式或者3.3V signal模式，除非重新上电。\n- 收到CMD0命令后，卡将进入空闲状态（Idle state），但是仍然工作在SDR12时序下。UHS-I只提供了SD模式，没有提供SPI模式。\n- 由于更高的总线速度需要低水平的signaling，对SDR50、DDR50和SDR104模式，UHS-I提供的signaling为1.8V。host会给卡提供3.3V的电压，并且提供1.8V signaling水平的电压给SDCLK、CMD和DAT[3:0]线，这几个都是从3.3V的电源线转换过来的。为了避免主机与卡之间的电压不匹配，signaling水平在初始化时的电压转换序列中就已经被改变了。主机和卡通过ACMD41命令来确认双方是否支持1.8V signaling模式。如果主机和卡都支持1.8V signaling模式，这就意味着UHS-I卡可用。\n- UHS-I只能使用4-bit的bus模式，CMD42是个例外。如果卡被锁住了，就需要通过发送CMD42命令（1-bit模式）解锁，然后发送ACMD6命令将bus模式切换到4-bit。\n- 在卡解锁的情况下，CMD19命令执行在1.8V signaling的传输状态。其他情况，CMD19都会被当做非法命令。\n\n\n# SD Memory Card Functional Description\n对SD卡与主机(host)来说，有两种操作模式：\n\n- Card identification mode: 对卡reset重置后，主机进入卡识别模式，对卡来说，在reset后，除非收到CMD3命令，否则卡一直处于该模式下。\n- Data transfer mode: 当卡第一次发布它的RCA后，该卡将处于数据传输模式。而对主机来说，在它识别了bus线上的所有卡后，进入该模式。\n\n## Card identification mode\n### Operating Condition Validation\nSD卡识别模式流程图如下：\n\n![SD Memory Card State Diagram (card identification mode)](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-State-Diagram_card-identification-mode.png)\n\n\n1. 在主机与卡通信之前，主机不清楚卡支持的电压范围，并且卡也不知道是否支持主机提供的供电电压。主机会以默认电压发送一个reset指令(CMD0),并且主机默认卡能支持该命令。然后，为了确认电压，主机接下来会发送一个CMD8命令。\n\n2. 为了验证SD卡接口的操作条件，主机通过发送SEND\\_IF\\_COND (CMD8)命令，去获取SD卡支持的工作电压范围。SD卡通过检测CMD8的参数部分来检查主机使用的工作电压，主机通过分析卡CMD8的response参数来确认SD卡是否可以在所给电压下工作，如果SD卡可以在指定电压下工作，则它的response里面会包含cmd8参数里面提供的电压 。如果不支持所给电压，则SD卡不会给出任何响应信息，并继续处于IDLE状态。如果要初始化SDHC和SDXC，在第一次发送ACMD41命令前，必须先发送CMD8。\n\n3. SD\\_SEND\\_OP\\_COND (ACMD41)命令来识别或者拒绝不匹配host主机供电电压范围的卡。如果SD卡在主机规定的电压范围内不能实现数据传输，卡将放弃下一步的总线操作而进入不活动状态(Inactive State)。\n\n4. 主机发送ACMD41命令时，可以通过将该命令所带的OCR参数设置为0，用来查询卡支持的工作电压范围。当ACMD41被用于查询时，卡将忽略掉ACMD41里面的HCS参数。主机在查询到卡的工作电压后，也许会将该电压作为接下来发送的ACMD41命令的参数。\n\n5. 在整个初始化过程中，主机不允许改变正在操作的电压范围。\n\n### Card Initialization and Identification Process\n\n\n![Card Initialization and Identification Flow (SD mode)](http://on61oh42c.bkt.clouddn.com/Card-Initialization-and-Identification-Flow.png)\n\n1. 当总线被激合后，主机就开始处理卡的初始化和识别。在主机发送SD_SEND_OP_COND(ACMD41)命令开始处理SD卡初始化时，主机会在ACMD41的参数中设置它的操作条件和设置OCR中的HCS位。HCS位被设置为1表示主机支持SDHC或者SDXC。HCS被设置为0表示主机不支持SDHC和SDXC。\n\n2. 卡利用OCR里面的busy位来通知主机ACMD41的初始化已经完成。如果busy位为0，表示卡还在初始化，如果busy位为1，说明初始化已经完成。主机会在1s的时间内，重复不断地发送ACMD41命令，直到busy位被置1为止。卡只有在第一次收到设置电压的ACMD41命令时，才会去检查操作条件和OCR中的HCS位。并且在重复发送ACMD41命令的这段时间里，主机不应该发送任何命令，除了CMD0。\n\n3. 如果卡能正确响应CMD8，之后，卡对ACMD41命令的响应会包含一个CCS字段，CCS在卡返回ready时（busy位置1）有效。CCS=0表示卡是SDSC，CCS=1表示卡是SDHC或者SDXC。\n\n4. 在ACMD41之后，主机会发送 ALL\\_SEND\\_CID  (CMD2)，获取卡的CID。在卡发送它的CID之后，卡进入识别状态（Identification State）。\n\n5. 接着，主机发送CMD3 (SEND\\_RELATIVE\\_ADDR)，请求卡发布卡的RCA。RCA是一个比CID短的，并且将来在数据传输模式中使用的地址。\n\n## Data Transfer Mode\n\n因为一些卡在识别模式（Identification Mode）下，对操作频率有限制，所以在识别模式结束前，主机的频率需要一直保持在 fOD。在数据传输模式（Data Transfer Mode），主机频率在fpp范围内是可执行的。\n\n主机必须发送SEND\\_CSD(CMD9)来获得卡规格数据寄存器(CSD)内容，获取像块大小、卡容量这类信息。\n\nSET\\_DSR(CMD4)广播命令配置所有识别到的卡的驱动阶段。它对DSR寄存器进行编程以适应应用的总线布局（长度）、总线上卡的数目和数据传输频率。clock rate也是在这个时候从fOD切到fpp。对卡和主机来说，SET\\_DSR(CMD4)命令是个可选。\n\nCMD7用于选择卡，并且将卡带入传输状态(Transfer State)。在同一个时间内，只有一张卡能进入传输状态。当发送的CMD7的RCA地址参数为\"0x0000\"，所有卡将跳回到准备状态（Stand-by State ）。\n\nSD卡数据传输模式的流程图如下：\n\n![ SD Memory Card State Diagram (data transfer mode)](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-State-Diagram_data-transfer-mode.png)\n\n对已经拥有RCA的卡来说，对它发送identification commands（比如ACMD41、CMD2），它将不会有任何回应。在数据传输模式下，主机与被选中的卡（使用定向命令）之间的数据传输都是点对点的。通过cmd线，所有定向命令（addressed commands）都会收到一个用于确认的response。\n\n下面是数据传输模式下关于数据传输的一些总结：\n\n* 在任何时候，所有的读命令集在执行过程中都可以被stop command (CMD12)打断。cmd12命令将会使数据传输终止，并且使卡退回到传输状态（Transfer State）。读命令集包括：block read(CMD17), multiple  block read(CMD18), send write protect(CMD30), send SCR(ACMD51) 和 general command in read mode (CMD56)。\n* 在任何时候，所有的写命令集在执行过程中都可以被stop command (CMD12)打断。写命令集包括： block write(CMD24 and CMD25), program CSD(CMD27), lock/unlock command(CMD42)和general command in write mode(CMD56)。\n* 一旦数据传输完成，卡就会退出数据写状态，并且进入正在编程状态（Programming State）（传输成功），或者进入传输状态（传输失败）。\n* 如果一个块写操作被打断，但是最后一个block的块长度和CRC有效的话，这块数据也将会被编程到卡里。\n* 卡也许会对块写操作提供缓存，这意味着，在一个block还在被编程的情况下，下一个block可以被发送这个卡里面。如果所有的写缓存都已经满了的话，只要卡还在正在编程状态，DAT0线就会一直保持在拉低状态。\n* 对写CSD、写保护和擦除操作来说，卡不会提供缓存。这意味着，在卡正忙于处理这其中任何一个命令时，卡不会接收任何发送到卡的数据。只要卡还在忙，DAT0线就会拉低，并且处于正在编程状态（Programming State）。\n* 当卡正在编程时，不允许任何一个参数设置命令集（Parameter set commands）。参数设置命令集包括： set block length(CMD16), erase block start(CMD32)和erase block end(CMD33)。\n* 当卡正在编程时，不允许任何一个读命令集。\n* 当将其他的卡从准备状态（Stand-by）切换到传输状态（使用CMD7），不会中断当前卡的擦除或者编程操作。当前卡将会切换到断开状态（Disconnect State），并且释放数据线。\n* 当卡正在编程或者待编程时，对其重置（发送CMD0或者CMD15），将会导致操作终止，并且可能会导致卡内的数据内容被破坏。因此主机有责任去禁止这样的操作。\n\n\n至此，本文关于SD卡协议的内容就介绍到这里。通过本文，可以对SD卡有个大概的了解，尤其是关于SD卡初始化这段内容。就SD卡协议这方面来说，了解一些基本的东西就行。在我们今后在遇到SD问题时需要时，可以翻出来看一下。水平有限，有些地方可能会出现错误，望各位能指出来，希望能和各位共同探讨技术方面的内容。\n\n","source":"_posts/SD卡/深入理解SD卡-协议.md","raw":"---\ntitle: 深入理解SD卡:协议\ncategories: SD卡\ntags:\n- SD卡协议\n- Linux\n- kernel\n\n---\n\n# Overview\n**深入理解SD卡**系列文章将介绍SD卡，涉及SD卡的协议及驱动代码。我们学习SD卡目的是为了理解SD卡的驱动代码，修改它，最终解决工作中遇到的SD卡相关的问题。本系列文章的目标是理解SD，包括协议和驱动代码。在学习任何设备驱动时，有个东西我们是无法绕过的，那就是_协议_，本文讲的就是SD卡的协议。\n\n学习SD卡协议，可以让我们更好的了解SD卡的运作机制。在最开始学习SD卡的时候，我们只需要对SD卡的协议有个大概了解，能基本满足我们看懂SD卡驱动代码就行。如果之后在阅读SD卡驱动代码有不理解的地方，可以回过头来翻翻SD协议文档。建议在读SD驱动源码和学习SD卡协议之间交替进行，互相验证。\n\n关于SD卡，有个叫SD卡协会的组织，这个组织规定了各种涉及SD卡的协议，并发布协议文档。这些SD卡协议文档，最重要的有两种文档：SD Specifications Part 1 Physical Layer Simplified Specification 和SD Specifications Part A2 SD Host Controller Simplified Specification。\n\n个人理解，定协议的目的就是为了使某个事物标准化，标准化后，可以方便大家协作，简化工作量，提高效率，避免重复工作导致的浪费。Physical Layer Simplified Specification（以下简称：卡协议）规定了SD卡的物理规格和SD卡使用的命令协议，像Sandisk、Kingston这类SD卡制造商必须遵守该协议。假设Sandisk开发了一款SD卡没有遵循该协议，而是自己内部新搞了一套协议，这样市面上就没有设备能使用该款SD卡。除非有人专门开发一个驱动去适配该款SD卡，但是这样很浪费人力。如果每个SD卡厂商都使用自己的协议，那么每支持一款SD卡，都需要重新写一套代码去适配它，那这工作量就很恐怖了。\n\n类似的，SD Host Controller Simplified Specification（以下简称：主机协议）用来标准化SD主机控制器，针对的是SD卡主机控制器厂商。这个协议不是强制的，在我们阅读SD驱动代码的时候，如果涉及到SD卡主机控制的代码，我们可能需要翻一下这篇文档，或者查阅SD卡主机控制器厂商提供给我们的文档（一般都是各大cpu芯片厂商提供给我们开发者文档）。\n\n本文的讲解的是卡协议，接下来，会有一些的英文夹杂在中文里面，因为有些名词，还是原汁原味的好，我翻译出来，没了那种韵味，水平有限，望大家谅解。\n\n# System Features\n本大章节讲解SD的一些基本特征，包括SD卡的物理规格、容量、速度等方面。\n\n##Form-factor\n目前市面上按物理规格来看，常见的SD卡有三种：\n\n- 标准的SD卡，这种卡比较大，在有些相机或者PC电脑上会使用；\n- 第二种是miniSD，这种卡我没怎么使用，不作详述；\n- 最后一种是叫TF卡，也称mirco SD，这种卡比较小，是我们最常接触的，像我们的手机里面使用的就是这种卡。很多人基本上都管我们手机使用的那种卡叫SD卡，这样的叫法实际上不够准确，更准确应该是叫TF卡，但是不管怎样，都没人会去计较，能理解就行。\n\n本文中，如果我说SD卡，都是泛指这三类SD卡，除非特意说明。并且如果特指，我会使用标准SD卡或者TF卡等名称代替。\n\n## Capacity of Memory\nSD卡按容量(Capacity)分类，可以分为标准容量卡、高容量卡，扩展容量卡，详细如下：\n> 1. Standard Capacity SD Memory Card (SDSC): 这种卡容量小于等于2GB \n> 2. High Capacity SD Memory Card (SDHC): 这种卡容量大于2GB，小于等于32GB\n> 3. Extended Capacity SD Memory Card (SDXC)：这种卡容量大于32GB， 小于等于2TB\n\n如果你买了一张16G或者32G的SD卡，你会发现SD卡上面印有\"HC\"字样，代表该卡是SDHC卡，同理，64G的SD卡上面印着\"XC\"，表示SDXC卡。\n\n## Voltage range\nSD卡按供电范围划分，分两种：\n> 1. High Voltage SD Memory Card: 操作的电压范围在2.7-3.6V\n> 2. UHS-II SD Memory Card： 操作的电压范围VDD1: 2.7-3.6V, VDD2: 1.70-1.95V\n\nUHS-II类型的卡参考协议文档： SD Specifications Part 1 UHS-II Simplified Addendum\n \n## Bus Speed Mode (using 4 parallel data lines)\nSD卡按总线速度模式来分，有下面几种：\n> 1. Default Speed mode: 3.3V供电模式，频率上限25MHz，速度上限 12.5MB/sec\n> 2. High Speed mode: 3.3V供电模式，频率上限50MHz，速度上限 25MB/sec\n> 3. SDR12： UHS-I卡， 1.8V供电模式，频率上限25MHz，速度上限 12.5MB/sec\n> 4. SDR25： UHS-I卡， 1.8V供电模式，频率上限50MHz，速度上限 25MB/sec\n> 5. SDR50： UHS-I卡， 1.8V供电模式，频率上限100MHz，速度上限 50MB/sec\n> 6. SDR104： UHS-I卡， 1.8V供电模式，频率上限208MHz，速度上限 104MB/sec\n> 8. DDR50： UHS-I卡， 1.8V供电模式，频率上限50MHz，性能上限 50MB/sec\n> 9. UHS156： UHS-II RCLK Frequency Range 26MHz - 52MHz, up to 1.56Gbps per lane.\n\nSDR(Single Date Rate), 一个周期只能采集一次数据，即一个bit，由于SD卡是4条数据线并行传输，所以一个周期能传输4bit，如果频率是50MHz（即1秒传输次数为50 000 000），那么1秒能传输的数据量为25MB（这里1MB为1 000 000 Byte)。所以这就是为什么各种SDR模式里面，频率上限是速度上限的两倍。而对于DDR(Double Data Rate)，在时钟上升沿和下降沿都可以采集数据，也就是单一周期内可读取或写入2次，因此4条并行数据线在一个周期内能传输8bit。\n\n## Speed Class\nSD卡按照读写性能划分，有5种规格，每种规格后面的数字象征最小的读写速度：\n\n- Class 0 - 这种卡没有性能要求\n- Class 2 - 要求在 Default Speed mode 下，性能至少要达到（大于等于） 2MB/sec\n- Class 4 - 要求在 Default Speed mode 下，性能至少要达到 4MB/sec\n- Class 6 - 要求在 Default Speed mode 下，性能至少要达到 6MB/sec\n- Class 10 - 要求在 High Speed mode 下，性能至少要达到 10MB/sec\n\n厂商卖的SD卡上面基本上都会印着一个用圆圈包围起来的数字10，表示该卡是Class 10 类型的卡。\n\n#  Bus Protocol\n在SD Bus上，有三种transaction：\n\n- **Command**: 一个命令代表着将开始一个操作。命令通过CMD线传输，方向从host到card。\n- **Response**: 响应是card对前一次host发送的命令的执行情况的反馈。也是通过CMD线传输，方向从card到host。\n- **Data**: 数据是通过4条data线传输的，方向可以从card到host，也可以从host到card。\n\n不管Command，还是Response或者Data，都开始于一个start bit （bit值0），结束于一个end bit（bit值1）。\n\n关于这块的内容不做过多解释了，详情自行阅读\"Physical Layer Simplified Specification Version 4.10\"文档 \"3.6 Bus Protocl\" 章节的内容。 \n\n# Registers \n下图是SD卡的体系架构，可以看到内部包含了一系列的寄存器：\n\n<div style=\"text-align:center\" markdown=\"1\">\n![SD Memory Card Architecture](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png)\n</div>\n\n各个寄存器的详细信息如下：\n\n![SD Memory Card Registers](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Registers.png)\n\n## OCR register\nOCR寄存器保存着SD卡的工作电压范围。如果OCR寄存器的某位为1，表示卡支持该位对应的电压。最后一位表示卡上电后的状态(是否处于”忙状态”)，如果该位为0，表示忙，如果为1，表示处于空闲状态。\n\n![OCR Register Definition](http://on61oh42c.bkt.clouddn.com/ocr.png)\n\n## CID register\nCID是一个128 bits的寄存器，该寄存器包含一个卡的标识信息。\n\n![The CID Fields](http://on61oh42c.bkt.clouddn.com/cid.png)\n\n## CSD Register\n卡的描述数据寄存器（CSD）包含了访问该卡数据时的必要配置信息，比如the data format, error correction type, maximum data access time, device size 等等。\n\n![The CSD Register Fields (CSD Version 2.0)](http://on61oh42c.bkt.clouddn.com/csd.png)\n\n## RCA register\n卡的相对地址,该16位卡地址寄存器保存了卡在识别过程中发布的地址。该地址用于在主机识别卡后，利用该地址与卡进行通信。该寄存器只有在SD模式下才有效。\n\n##  SCR register\nSD配置寄存器提供SD卡的特殊特性信息，其大小为64位。该寄存器由厂商编程，主机不能对它进行编程。\n\n![The SCR Fields](http://on61oh42c.bkt.clouddn.com/scr.png)\n\n# UHS\nUHS（Ultra High Speed）是与SDXC同时推出的SD卡总线标准。此标准适用于SDHC和SDXC。\n\nUHS-I最高传输速度（理论值）为104MB/s。英文字母I代表该设备（SD卡或读卡器）支持UHS-I接口。英文字母U，包含数目字1，代表该设备读写速度达U1。\n\nUHS-II最高传输速度达312MB/s，是UHS-I的三倍。\n\n设备（如智能手机）必须支持UHS，才能保证达到U1或U3最低写入速度。\n\n下面介绍UHS-I初始化的命令序列流程。\n\n![Command Sequence to Use UHS-I](http://on61oh42c.bkt.clouddn.com/Command-Sequence-to-Use-UHS-I.png)\n\n- 上电后，卡会处于3.3V signaling模式下。第一个CMD0命令会选择bus模式：SD模式或者SPI模式。只有在SD模式下，才能进入1.8V signaling模式。一旦卡进入1.8V signal模式，卡不能切换到SPI模式或者3.3V signal模式，除非重新上电。\n- 收到CMD0命令后，卡将进入空闲状态（Idle state），但是仍然工作在SDR12时序下。UHS-I只提供了SD模式，没有提供SPI模式。\n- 由于更高的总线速度需要低水平的signaling，对SDR50、DDR50和SDR104模式，UHS-I提供的signaling为1.8V。host会给卡提供3.3V的电压，并且提供1.8V signaling水平的电压给SDCLK、CMD和DAT[3:0]线，这几个都是从3.3V的电源线转换过来的。为了避免主机与卡之间的电压不匹配，signaling水平在初始化时的电压转换序列中就已经被改变了。主机和卡通过ACMD41命令来确认双方是否支持1.8V signaling模式。如果主机和卡都支持1.8V signaling模式，这就意味着UHS-I卡可用。\n- UHS-I只能使用4-bit的bus模式，CMD42是个例外。如果卡被锁住了，就需要通过发送CMD42命令（1-bit模式）解锁，然后发送ACMD6命令将bus模式切换到4-bit。\n- 在卡解锁的情况下，CMD19命令执行在1.8V signaling的传输状态。其他情况，CMD19都会被当做非法命令。\n\n\n# SD Memory Card Functional Description\n对SD卡与主机(host)来说，有两种操作模式：\n\n- Card identification mode: 对卡reset重置后，主机进入卡识别模式，对卡来说，在reset后，除非收到CMD3命令，否则卡一直处于该模式下。\n- Data transfer mode: 当卡第一次发布它的RCA后，该卡将处于数据传输模式。而对主机来说，在它识别了bus线上的所有卡后，进入该模式。\n\n## Card identification mode\n### Operating Condition Validation\nSD卡识别模式流程图如下：\n\n![SD Memory Card State Diagram (card identification mode)](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-State-Diagram_card-identification-mode.png)\n\n\n1. 在主机与卡通信之前，主机不清楚卡支持的电压范围，并且卡也不知道是否支持主机提供的供电电压。主机会以默认电压发送一个reset指令(CMD0),并且主机默认卡能支持该命令。然后，为了确认电压，主机接下来会发送一个CMD8命令。\n\n2. 为了验证SD卡接口的操作条件，主机通过发送SEND\\_IF\\_COND (CMD8)命令，去获取SD卡支持的工作电压范围。SD卡通过检测CMD8的参数部分来检查主机使用的工作电压，主机通过分析卡CMD8的response参数来确认SD卡是否可以在所给电压下工作，如果SD卡可以在指定电压下工作，则它的response里面会包含cmd8参数里面提供的电压 。如果不支持所给电压，则SD卡不会给出任何响应信息，并继续处于IDLE状态。如果要初始化SDHC和SDXC，在第一次发送ACMD41命令前，必须先发送CMD8。\n\n3. SD\\_SEND\\_OP\\_COND (ACMD41)命令来识别或者拒绝不匹配host主机供电电压范围的卡。如果SD卡在主机规定的电压范围内不能实现数据传输，卡将放弃下一步的总线操作而进入不活动状态(Inactive State)。\n\n4. 主机发送ACMD41命令时，可以通过将该命令所带的OCR参数设置为0，用来查询卡支持的工作电压范围。当ACMD41被用于查询时，卡将忽略掉ACMD41里面的HCS参数。主机在查询到卡的工作电压后，也许会将该电压作为接下来发送的ACMD41命令的参数。\n\n5. 在整个初始化过程中，主机不允许改变正在操作的电压范围。\n\n### Card Initialization and Identification Process\n\n\n![Card Initialization and Identification Flow (SD mode)](http://on61oh42c.bkt.clouddn.com/Card-Initialization-and-Identification-Flow.png)\n\n1. 当总线被激合后，主机就开始处理卡的初始化和识别。在主机发送SD_SEND_OP_COND(ACMD41)命令开始处理SD卡初始化时，主机会在ACMD41的参数中设置它的操作条件和设置OCR中的HCS位。HCS位被设置为1表示主机支持SDHC或者SDXC。HCS被设置为0表示主机不支持SDHC和SDXC。\n\n2. 卡利用OCR里面的busy位来通知主机ACMD41的初始化已经完成。如果busy位为0，表示卡还在初始化，如果busy位为1，说明初始化已经完成。主机会在1s的时间内，重复不断地发送ACMD41命令，直到busy位被置1为止。卡只有在第一次收到设置电压的ACMD41命令时，才会去检查操作条件和OCR中的HCS位。并且在重复发送ACMD41命令的这段时间里，主机不应该发送任何命令，除了CMD0。\n\n3. 如果卡能正确响应CMD8，之后，卡对ACMD41命令的响应会包含一个CCS字段，CCS在卡返回ready时（busy位置1）有效。CCS=0表示卡是SDSC，CCS=1表示卡是SDHC或者SDXC。\n\n4. 在ACMD41之后，主机会发送 ALL\\_SEND\\_CID  (CMD2)，获取卡的CID。在卡发送它的CID之后，卡进入识别状态（Identification State）。\n\n5. 接着，主机发送CMD3 (SEND\\_RELATIVE\\_ADDR)，请求卡发布卡的RCA。RCA是一个比CID短的，并且将来在数据传输模式中使用的地址。\n\n## Data Transfer Mode\n\n因为一些卡在识别模式（Identification Mode）下，对操作频率有限制，所以在识别模式结束前，主机的频率需要一直保持在 fOD。在数据传输模式（Data Transfer Mode），主机频率在fpp范围内是可执行的。\n\n主机必须发送SEND\\_CSD(CMD9)来获得卡规格数据寄存器(CSD)内容，获取像块大小、卡容量这类信息。\n\nSET\\_DSR(CMD4)广播命令配置所有识别到的卡的驱动阶段。它对DSR寄存器进行编程以适应应用的总线布局（长度）、总线上卡的数目和数据传输频率。clock rate也是在这个时候从fOD切到fpp。对卡和主机来说，SET\\_DSR(CMD4)命令是个可选。\n\nCMD7用于选择卡，并且将卡带入传输状态(Transfer State)。在同一个时间内，只有一张卡能进入传输状态。当发送的CMD7的RCA地址参数为\"0x0000\"，所有卡将跳回到准备状态（Stand-by State ）。\n\nSD卡数据传输模式的流程图如下：\n\n![ SD Memory Card State Diagram (data transfer mode)](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-State-Diagram_data-transfer-mode.png)\n\n对已经拥有RCA的卡来说，对它发送identification commands（比如ACMD41、CMD2），它将不会有任何回应。在数据传输模式下，主机与被选中的卡（使用定向命令）之间的数据传输都是点对点的。通过cmd线，所有定向命令（addressed commands）都会收到一个用于确认的response。\n\n下面是数据传输模式下关于数据传输的一些总结：\n\n* 在任何时候，所有的读命令集在执行过程中都可以被stop command (CMD12)打断。cmd12命令将会使数据传输终止，并且使卡退回到传输状态（Transfer State）。读命令集包括：block read(CMD17), multiple  block read(CMD18), send write protect(CMD30), send SCR(ACMD51) 和 general command in read mode (CMD56)。\n* 在任何时候，所有的写命令集在执行过程中都可以被stop command (CMD12)打断。写命令集包括： block write(CMD24 and CMD25), program CSD(CMD27), lock/unlock command(CMD42)和general command in write mode(CMD56)。\n* 一旦数据传输完成，卡就会退出数据写状态，并且进入正在编程状态（Programming State）（传输成功），或者进入传输状态（传输失败）。\n* 如果一个块写操作被打断，但是最后一个block的块长度和CRC有效的话，这块数据也将会被编程到卡里。\n* 卡也许会对块写操作提供缓存，这意味着，在一个block还在被编程的情况下，下一个block可以被发送这个卡里面。如果所有的写缓存都已经满了的话，只要卡还在正在编程状态，DAT0线就会一直保持在拉低状态。\n* 对写CSD、写保护和擦除操作来说，卡不会提供缓存。这意味着，在卡正忙于处理这其中任何一个命令时，卡不会接收任何发送到卡的数据。只要卡还在忙，DAT0线就会拉低，并且处于正在编程状态（Programming State）。\n* 当卡正在编程时，不允许任何一个参数设置命令集（Parameter set commands）。参数设置命令集包括： set block length(CMD16), erase block start(CMD32)和erase block end(CMD33)。\n* 当卡正在编程时，不允许任何一个读命令集。\n* 当将其他的卡从准备状态（Stand-by）切换到传输状态（使用CMD7），不会中断当前卡的擦除或者编程操作。当前卡将会切换到断开状态（Disconnect State），并且释放数据线。\n* 当卡正在编程或者待编程时，对其重置（发送CMD0或者CMD15），将会导致操作终止，并且可能会导致卡内的数据内容被破坏。因此主机有责任去禁止这样的操作。\n\n\n至此，本文关于SD卡协议的内容就介绍到这里。通过本文，可以对SD卡有个大概的了解，尤其是关于SD卡初始化这段内容。就SD卡协议这方面来说，了解一些基本的东西就行。在我们今后在遇到SD问题时需要时，可以翻出来看一下。水平有限，有些地方可能会出现错误，望各位能指出来，希望能和各位共同探讨技术方面的内容。\n\n","slug":"SD卡/深入理解SD卡-协议","published":1,"date":"2017-03-21T09:47:20.000Z","updated":"2017-03-25T13:57:21.000Z","_id":"cj0jly9wp0005sdrr1nmb078i","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p><strong>深入理解SD卡</strong>系列文章将介绍SD卡，涉及SD卡的协议及驱动代码。我们学习SD卡目的是为了理解SD卡的驱动代码，修改它，最终解决工作中遇到的SD卡相关的问题。本系列文章的目标是理解SD，包括协议和驱动代码。在学习任何设备驱动时，有个东西我们是无法绕过的，那就是<em>协议</em>，本文讲的就是SD卡的协议。</p>\n<p>学习SD卡协议，可以让我们更好的了解SD卡的运作机制。在最开始学习SD卡的时候，我们只需要对SD卡的协议有个大概了解，能基本满足我们看懂SD卡驱动代码就行。如果之后在阅读SD卡驱动代码有不理解的地方，可以回过头来翻翻SD协议文档。建议在读SD驱动源码和学习SD卡协议之间交替进行，互相验证。</p>\n<p>关于SD卡，有个叫SD卡协会的组织，这个组织规定了各种涉及SD卡的协议，并发布协议文档。这些SD卡协议文档，最重要的有两种文档：SD Specifications Part 1 Physical Layer Simplified Specification 和SD Specifications Part A2 SD Host Controller Simplified Specification。</p>\n<p>个人理解，定协议的目的就是为了使某个事物标准化，标准化后，可以方便大家协作，简化工作量，提高效率，避免重复工作导致的浪费。Physical Layer Simplified Specification（以下简称：卡协议）规定了SD卡的物理规格和SD卡使用的命令协议，像Sandisk、Kingston这类SD卡制造商必须遵守该协议。假设Sandisk开发了一款SD卡没有遵循该协议，而是自己内部新搞了一套协议，这样市面上就没有设备能使用该款SD卡。除非有人专门开发一个驱动去适配该款SD卡，但是这样很浪费人力。如果每个SD卡厂商都使用自己的协议，那么每支持一款SD卡，都需要重新写一套代码去适配它，那这工作量就很恐怖了。</p>\n<p>类似的，SD Host Controller Simplified Specification（以下简称：主机协议）用来标准化SD主机控制器，针对的是SD卡主机控制器厂商。这个协议不是强制的，在我们阅读SD驱动代码的时候，如果涉及到SD卡主机控制的代码，我们可能需要翻一下这篇文档，或者查阅SD卡主机控制器厂商提供给我们的文档（一般都是各大cpu芯片厂商提供给我们开发者文档）。</p>\n<p>本文的讲解的是卡协议，接下来，会有一些的英文夹杂在中文里面，因为有些名词，还是原汁原味的好，我翻译出来，没了那种韵味，水平有限，望大家谅解。</p>\n<h1 id=\"System-Features\"><a href=\"#System-Features\" class=\"headerlink\" title=\"System Features\"></a>System Features</h1><p>本大章节讲解SD的一些基本特征，包括SD卡的物理规格、容量、速度等方面。</p>\n<p>##Form-factor<br>目前市面上按物理规格来看，常见的SD卡有三种：</p>\n<ul>\n<li>标准的SD卡，这种卡比较大，在有些相机或者PC电脑上会使用；</li>\n<li>第二种是miniSD，这种卡我没怎么使用，不作详述；</li>\n<li>最后一种是叫TF卡，也称mirco SD，这种卡比较小，是我们最常接触的，像我们的手机里面使用的就是这种卡。很多人基本上都管我们手机使用的那种卡叫SD卡，这样的叫法实际上不够准确，更准确应该是叫TF卡，但是不管怎样，都没人会去计较，能理解就行。</li>\n</ul>\n<p>本文中，如果我说SD卡，都是泛指这三类SD卡，除非特意说明。并且如果特指，我会使用标准SD卡或者TF卡等名称代替。</p>\n<h2 id=\"Capacity-of-Memory\"><a href=\"#Capacity-of-Memory\" class=\"headerlink\" title=\"Capacity of Memory\"></a>Capacity of Memory</h2><p>SD卡按容量(Capacity)分类，可以分为标准容量卡、高容量卡，扩展容量卡，详细如下：</p>\n<blockquote>\n<ol>\n<li>Standard Capacity SD Memory Card (SDSC): 这种卡容量小于等于2GB </li>\n<li>High Capacity SD Memory Card (SDHC): 这种卡容量大于2GB，小于等于32GB</li>\n<li>Extended Capacity SD Memory Card (SDXC)：这种卡容量大于32GB， 小于等于2TB</li>\n</ol>\n</blockquote>\n<p>如果你买了一张16G或者32G的SD卡，你会发现SD卡上面印有”HC”字样，代表该卡是SDHC卡，同理，64G的SD卡上面印着”XC”，表示SDXC卡。</p>\n<h2 id=\"Voltage-range\"><a href=\"#Voltage-range\" class=\"headerlink\" title=\"Voltage range\"></a>Voltage range</h2><p>SD卡按供电范围划分，分两种：</p>\n<blockquote>\n<ol>\n<li>High Voltage SD Memory Card: 操作的电压范围在2.7-3.6V</li>\n<li>UHS-II SD Memory Card： 操作的电压范围VDD1: 2.7-3.6V, VDD2: 1.70-1.95V</li>\n</ol>\n</blockquote>\n<p>UHS-II类型的卡参考协议文档： SD Specifications Part 1 UHS-II Simplified Addendum</p>\n<h2 id=\"Bus-Speed-Mode-using-4-parallel-data-lines\"><a href=\"#Bus-Speed-Mode-using-4-parallel-data-lines\" class=\"headerlink\" title=\"Bus Speed Mode (using 4 parallel data lines)\"></a>Bus Speed Mode (using 4 parallel data lines)</h2><p>SD卡按总线速度模式来分，有下面几种：</p>\n<blockquote>\n<ol>\n<li>Default Speed mode: 3.3V供电模式，频率上限25MHz，速度上限 12.5MB/sec</li>\n<li>High Speed mode: 3.3V供电模式，频率上限50MHz，速度上限 25MB/sec</li>\n<li>SDR12： UHS-I卡， 1.8V供电模式，频率上限25MHz，速度上限 12.5MB/sec</li>\n<li>SDR25： UHS-I卡， 1.8V供电模式，频率上限50MHz，速度上限 25MB/sec</li>\n<li>SDR50： UHS-I卡， 1.8V供电模式，频率上限100MHz，速度上限 50MB/sec</li>\n<li>SDR104： UHS-I卡， 1.8V供电模式，频率上限208MHz，速度上限 104MB/sec</li>\n<li>DDR50： UHS-I卡， 1.8V供电模式，频率上限50MHz，性能上限 50MB/sec</li>\n<li>UHS156： UHS-II RCLK Frequency Range 26MHz - 52MHz, up to 1.56Gbps per lane.</li>\n</ol>\n</blockquote>\n<p>SDR(Single Date Rate), 一个周期只能采集一次数据，即一个bit，由于SD卡是4条数据线并行传输，所以一个周期能传输4bit，如果频率是50MHz（即1秒传输次数为50 000 000），那么1秒能传输的数据量为25MB（这里1MB为1 000 000 Byte)。所以这就是为什么各种SDR模式里面，频率上限是速度上限的两倍。而对于DDR(Double Data Rate)，在时钟上升沿和下降沿都可以采集数据，也就是单一周期内可读取或写入2次，因此4条并行数据线在一个周期内能传输8bit。</p>\n<h2 id=\"Speed-Class\"><a href=\"#Speed-Class\" class=\"headerlink\" title=\"Speed Class\"></a>Speed Class</h2><p>SD卡按照读写性能划分，有5种规格，每种规格后面的数字象征最小的读写速度：</p>\n<ul>\n<li>Class 0 - 这种卡没有性能要求</li>\n<li>Class 2 - 要求在 Default Speed mode 下，性能至少要达到（大于等于） 2MB/sec</li>\n<li>Class 4 - 要求在 Default Speed mode 下，性能至少要达到 4MB/sec</li>\n<li>Class 6 - 要求在 Default Speed mode 下，性能至少要达到 6MB/sec</li>\n<li>Class 10 - 要求在 High Speed mode 下，性能至少要达到 10MB/sec</li>\n</ul>\n<p>厂商卖的SD卡上面基本上都会印着一个用圆圈包围起来的数字10，表示该卡是Class 10 类型的卡。</p>\n<h1 id=\"Bus-Protocol\"><a href=\"#Bus-Protocol\" class=\"headerlink\" title=\"Bus Protocol\"></a>Bus Protocol</h1><p>在SD Bus上，有三种transaction：</p>\n<ul>\n<li><strong>Command</strong>: 一个命令代表着将开始一个操作。命令通过CMD线传输，方向从host到card。</li>\n<li><strong>Response</strong>: 响应是card对前一次host发送的命令的执行情况的反馈。也是通过CMD线传输，方向从card到host。</li>\n<li><strong>Data</strong>: 数据是通过4条data线传输的，方向可以从card到host，也可以从host到card。</li>\n</ul>\n<p>不管Command，还是Response或者Data，都开始于一个start bit （bit值0），结束于一个end bit（bit值1）。</p>\n<p>关于这块的内容不做过多解释了，详情自行阅读”Physical Layer Simplified Specification Version 4.10”文档 “3.6 Bus Protocl” 章节的内容。 </p>\n<h1 id=\"Registers\"><a href=\"#Registers\" class=\"headerlink\" title=\"Registers\"></a>Registers</h1><p>下图是SD卡的体系架构，可以看到内部包含了一系列的寄存器：</p>\n<div style=\"text-align:center\" markdown=\"1\"><br><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png\" alt=\"SD Memory Card Architecture\"><br></div>\n\n<p>各个寄存器的详细信息如下：</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Registers.png\" alt=\"SD Memory Card Registers\"></p>\n<h2 id=\"OCR-register\"><a href=\"#OCR-register\" class=\"headerlink\" title=\"OCR register\"></a>OCR register</h2><p>OCR寄存器保存着SD卡的工作电压范围。如果OCR寄存器的某位为1，表示卡支持该位对应的电压。最后一位表示卡上电后的状态(是否处于”忙状态”)，如果该位为0，表示忙，如果为1，表示处于空闲状态。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/ocr.png\" alt=\"OCR Register Definition\"></p>\n<h2 id=\"CID-register\"><a href=\"#CID-register\" class=\"headerlink\" title=\"CID register\"></a>CID register</h2><p>CID是一个128 bits的寄存器，该寄存器包含一个卡的标识信息。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/cid.png\" alt=\"The CID Fields\"></p>\n<h2 id=\"CSD-Register\"><a href=\"#CSD-Register\" class=\"headerlink\" title=\"CSD Register\"></a>CSD Register</h2><p>卡的描述数据寄存器（CSD）包含了访问该卡数据时的必要配置信息，比如the data format, error correction type, maximum data access time, device size 等等。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/csd.png\" alt=\"The CSD Register Fields (CSD Version 2.0)\"></p>\n<h2 id=\"RCA-register\"><a href=\"#RCA-register\" class=\"headerlink\" title=\"RCA register\"></a>RCA register</h2><p>卡的相对地址,该16位卡地址寄存器保存了卡在识别过程中发布的地址。该地址用于在主机识别卡后，利用该地址与卡进行通信。该寄存器只有在SD模式下才有效。</p>\n<h2 id=\"SCR-register\"><a href=\"#SCR-register\" class=\"headerlink\" title=\"SCR register\"></a>SCR register</h2><p>SD配置寄存器提供SD卡的特殊特性信息，其大小为64位。该寄存器由厂商编程，主机不能对它进行编程。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/scr.png\" alt=\"The SCR Fields\"></p>\n<h1 id=\"UHS\"><a href=\"#UHS\" class=\"headerlink\" title=\"UHS\"></a>UHS</h1><p>UHS（Ultra High Speed）是与SDXC同时推出的SD卡总线标准。此标准适用于SDHC和SDXC。</p>\n<p>UHS-I最高传输速度（理论值）为104MB/s。英文字母I代表该设备（SD卡或读卡器）支持UHS-I接口。英文字母U，包含数目字1，代表该设备读写速度达U1。</p>\n<p>UHS-II最高传输速度达312MB/s，是UHS-I的三倍。</p>\n<p>设备（如智能手机）必须支持UHS，才能保证达到U1或U3最低写入速度。</p>\n<p>下面介绍UHS-I初始化的命令序列流程。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/Command-Sequence-to-Use-UHS-I.png\" alt=\"Command Sequence to Use UHS-I\"></p>\n<ul>\n<li>上电后，卡会处于3.3V signaling模式下。第一个CMD0命令会选择bus模式：SD模式或者SPI模式。只有在SD模式下，才能进入1.8V signaling模式。一旦卡进入1.8V signal模式，卡不能切换到SPI模式或者3.3V signal模式，除非重新上电。</li>\n<li>收到CMD0命令后，卡将进入空闲状态（Idle state），但是仍然工作在SDR12时序下。UHS-I只提供了SD模式，没有提供SPI模式。</li>\n<li>由于更高的总线速度需要低水平的signaling，对SDR50、DDR50和SDR104模式，UHS-I提供的signaling为1.8V。host会给卡提供3.3V的电压，并且提供1.8V signaling水平的电压给SDCLK、CMD和DAT[3:0]线，这几个都是从3.3V的电源线转换过来的。为了避免主机与卡之间的电压不匹配，signaling水平在初始化时的电压转换序列中就已经被改变了。主机和卡通过ACMD41命令来确认双方是否支持1.8V signaling模式。如果主机和卡都支持1.8V signaling模式，这就意味着UHS-I卡可用。</li>\n<li>UHS-I只能使用4-bit的bus模式，CMD42是个例外。如果卡被锁住了，就需要通过发送CMD42命令（1-bit模式）解锁，然后发送ACMD6命令将bus模式切换到4-bit。</li>\n<li>在卡解锁的情况下，CMD19命令执行在1.8V signaling的传输状态。其他情况，CMD19都会被当做非法命令。</li>\n</ul>\n<h1 id=\"SD-Memory-Card-Functional-Description\"><a href=\"#SD-Memory-Card-Functional-Description\" class=\"headerlink\" title=\"SD Memory Card Functional Description\"></a>SD Memory Card Functional Description</h1><p>对SD卡与主机(host)来说，有两种操作模式：</p>\n<ul>\n<li>Card identification mode: 对卡reset重置后，主机进入卡识别模式，对卡来说，在reset后，除非收到CMD3命令，否则卡一直处于该模式下。</li>\n<li>Data transfer mode: 当卡第一次发布它的RCA后，该卡将处于数据传输模式。而对主机来说，在它识别了bus线上的所有卡后，进入该模式。</li>\n</ul>\n<h2 id=\"Card-identification-mode\"><a href=\"#Card-identification-mode\" class=\"headerlink\" title=\"Card identification mode\"></a>Card identification mode</h2><h3 id=\"Operating-Condition-Validation\"><a href=\"#Operating-Condition-Validation\" class=\"headerlink\" title=\"Operating Condition Validation\"></a>Operating Condition Validation</h3><p>SD卡识别模式流程图如下：</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-State-Diagram_card-identification-mode.png\" alt=\"SD Memory Card State Diagram (card identification mode)\"></p>\n<ol>\n<li><p>在主机与卡通信之前，主机不清楚卡支持的电压范围，并且卡也不知道是否支持主机提供的供电电压。主机会以默认电压发送一个reset指令(CMD0),并且主机默认卡能支持该命令。然后，为了确认电压，主机接下来会发送一个CMD8命令。</p>\n</li>\n<li><p>为了验证SD卡接口的操作条件，主机通过发送SEND_IF_COND (CMD8)命令，去获取SD卡支持的工作电压范围。SD卡通过检测CMD8的参数部分来检查主机使用的工作电压，主机通过分析卡CMD8的response参数来确认SD卡是否可以在所给电压下工作，如果SD卡可以在指定电压下工作，则它的response里面会包含cmd8参数里面提供的电压 。如果不支持所给电压，则SD卡不会给出任何响应信息，并继续处于IDLE状态。如果要初始化SDHC和SDXC，在第一次发送ACMD41命令前，必须先发送CMD8。</p>\n</li>\n<li><p>SD_SEND_OP_COND (ACMD41)命令来识别或者拒绝不匹配host主机供电电压范围的卡。如果SD卡在主机规定的电压范围内不能实现数据传输，卡将放弃下一步的总线操作而进入不活动状态(Inactive State)。</p>\n</li>\n<li><p>主机发送ACMD41命令时，可以通过将该命令所带的OCR参数设置为0，用来查询卡支持的工作电压范围。当ACMD41被用于查询时，卡将忽略掉ACMD41里面的HCS参数。主机在查询到卡的工作电压后，也许会将该电压作为接下来发送的ACMD41命令的参数。</p>\n</li>\n<li><p>在整个初始化过程中，主机不允许改变正在操作的电压范围。</p>\n</li>\n</ol>\n<h3 id=\"Card-Initialization-and-Identification-Process\"><a href=\"#Card-Initialization-and-Identification-Process\" class=\"headerlink\" title=\"Card Initialization and Identification Process\"></a>Card Initialization and Identification Process</h3><p><img src=\"http://on61oh42c.bkt.clouddn.com/Card-Initialization-and-Identification-Flow.png\" alt=\"Card Initialization and Identification Flow (SD mode)\"></p>\n<ol>\n<li><p>当总线被激合后，主机就开始处理卡的初始化和识别。在主机发送SD_SEND_OP_COND(ACMD41)命令开始处理SD卡初始化时，主机会在ACMD41的参数中设置它的操作条件和设置OCR中的HCS位。HCS位被设置为1表示主机支持SDHC或者SDXC。HCS被设置为0表示主机不支持SDHC和SDXC。</p>\n</li>\n<li><p>卡利用OCR里面的busy位来通知主机ACMD41的初始化已经完成。如果busy位为0，表示卡还在初始化，如果busy位为1，说明初始化已经完成。主机会在1s的时间内，重复不断地发送ACMD41命令，直到busy位被置1为止。卡只有在第一次收到设置电压的ACMD41命令时，才会去检查操作条件和OCR中的HCS位。并且在重复发送ACMD41命令的这段时间里，主机不应该发送任何命令，除了CMD0。</p>\n</li>\n<li><p>如果卡能正确响应CMD8，之后，卡对ACMD41命令的响应会包含一个CCS字段，CCS在卡返回ready时（busy位置1）有效。CCS=0表示卡是SDSC，CCS=1表示卡是SDHC或者SDXC。</p>\n</li>\n<li><p>在ACMD41之后，主机会发送 ALL_SEND_CID  (CMD2)，获取卡的CID。在卡发送它的CID之后，卡进入识别状态（Identification State）。</p>\n</li>\n<li><p>接着，主机发送CMD3 (SEND_RELATIVE_ADDR)，请求卡发布卡的RCA。RCA是一个比CID短的，并且将来在数据传输模式中使用的地址。</p>\n</li>\n</ol>\n<h2 id=\"Data-Transfer-Mode\"><a href=\"#Data-Transfer-Mode\" class=\"headerlink\" title=\"Data Transfer Mode\"></a>Data Transfer Mode</h2><p>因为一些卡在识别模式（Identification Mode）下，对操作频率有限制，所以在识别模式结束前，主机的频率需要一直保持在 fOD。在数据传输模式（Data Transfer Mode），主机频率在fpp范围内是可执行的。</p>\n<p>主机必须发送SEND_CSD(CMD9)来获得卡规格数据寄存器(CSD)内容，获取像块大小、卡容量这类信息。</p>\n<p>SET_DSR(CMD4)广播命令配置所有识别到的卡的驱动阶段。它对DSR寄存器进行编程以适应应用的总线布局（长度）、总线上卡的数目和数据传输频率。clock rate也是在这个时候从fOD切到fpp。对卡和主机来说，SET_DSR(CMD4)命令是个可选。</p>\n<p>CMD7用于选择卡，并且将卡带入传输状态(Transfer State)。在同一个时间内，只有一张卡能进入传输状态。当发送的CMD7的RCA地址参数为”0x0000”，所有卡将跳回到准备状态（Stand-by State ）。</p>\n<p>SD卡数据传输模式的流程图如下：</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-State-Diagram_data-transfer-mode.png\" alt=\" SD Memory Card State Diagram (data transfer mode)\"></p>\n<p>对已经拥有RCA的卡来说，对它发送identification commands（比如ACMD41、CMD2），它将不会有任何回应。在数据传输模式下，主机与被选中的卡（使用定向命令）之间的数据传输都是点对点的。通过cmd线，所有定向命令（addressed commands）都会收到一个用于确认的response。</p>\n<p>下面是数据传输模式下关于数据传输的一些总结：</p>\n<ul>\n<li>在任何时候，所有的读命令集在执行过程中都可以被stop command (CMD12)打断。cmd12命令将会使数据传输终止，并且使卡退回到传输状态（Transfer State）。读命令集包括：block read(CMD17), multiple  block read(CMD18), send write protect(CMD30), send SCR(ACMD51) 和 general command in read mode (CMD56)。</li>\n<li>在任何时候，所有的写命令集在执行过程中都可以被stop command (CMD12)打断。写命令集包括： block write(CMD24 and CMD25), program CSD(CMD27), lock/unlock command(CMD42)和general command in write mode(CMD56)。</li>\n<li>一旦数据传输完成，卡就会退出数据写状态，并且进入正在编程状态（Programming State）（传输成功），或者进入传输状态（传输失败）。</li>\n<li>如果一个块写操作被打断，但是最后一个block的块长度和CRC有效的话，这块数据也将会被编程到卡里。</li>\n<li>卡也许会对块写操作提供缓存，这意味着，在一个block还在被编程的情况下，下一个block可以被发送这个卡里面。如果所有的写缓存都已经满了的话，只要卡还在正在编程状态，DAT0线就会一直保持在拉低状态。</li>\n<li>对写CSD、写保护和擦除操作来说，卡不会提供缓存。这意味着，在卡正忙于处理这其中任何一个命令时，卡不会接收任何发送到卡的数据。只要卡还在忙，DAT0线就会拉低，并且处于正在编程状态（Programming State）。</li>\n<li>当卡正在编程时，不允许任何一个参数设置命令集（Parameter set commands）。参数设置命令集包括： set block length(CMD16), erase block start(CMD32)和erase block end(CMD33)。</li>\n<li>当卡正在编程时，不允许任何一个读命令集。</li>\n<li>当将其他的卡从准备状态（Stand-by）切换到传输状态（使用CMD7），不会中断当前卡的擦除或者编程操作。当前卡将会切换到断开状态（Disconnect State），并且释放数据线。</li>\n<li>当卡正在编程或者待编程时，对其重置（发送CMD0或者CMD15），将会导致操作终止，并且可能会导致卡内的数据内容被破坏。因此主机有责任去禁止这样的操作。</li>\n</ul>\n<p>至此，本文关于SD卡协议的内容就介绍到这里。通过本文，可以对SD卡有个大概的了解，尤其是关于SD卡初始化这段内容。就SD卡协议这方面来说，了解一些基本的东西就行。在我们今后在遇到SD问题时需要时，可以翻出来看一下。水平有限，有些地方可能会出现错误，望各位能指出来，希望能和各位共同探讨技术方面的内容。</p>\n","excerpt":"","more":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p><strong>深入理解SD卡</strong>系列文章将介绍SD卡，涉及SD卡的协议及驱动代码。我们学习SD卡目的是为了理解SD卡的驱动代码，修改它，最终解决工作中遇到的SD卡相关的问题。本系列文章的目标是理解SD，包括协议和驱动代码。在学习任何设备驱动时，有个东西我们是无法绕过的，那就是<em>协议</em>，本文讲的就是SD卡的协议。</p>\n<p>学习SD卡协议，可以让我们更好的了解SD卡的运作机制。在最开始学习SD卡的时候，我们只需要对SD卡的协议有个大概了解，能基本满足我们看懂SD卡驱动代码就行。如果之后在阅读SD卡驱动代码有不理解的地方，可以回过头来翻翻SD协议文档。建议在读SD驱动源码和学习SD卡协议之间交替进行，互相验证。</p>\n<p>关于SD卡，有个叫SD卡协会的组织，这个组织规定了各种涉及SD卡的协议，并发布协议文档。这些SD卡协议文档，最重要的有两种文档：SD Specifications Part 1 Physical Layer Simplified Specification 和SD Specifications Part A2 SD Host Controller Simplified Specification。</p>\n<p>个人理解，定协议的目的就是为了使某个事物标准化，标准化后，可以方便大家协作，简化工作量，提高效率，避免重复工作导致的浪费。Physical Layer Simplified Specification（以下简称：卡协议）规定了SD卡的物理规格和SD卡使用的命令协议，像Sandisk、Kingston这类SD卡制造商必须遵守该协议。假设Sandisk开发了一款SD卡没有遵循该协议，而是自己内部新搞了一套协议，这样市面上就没有设备能使用该款SD卡。除非有人专门开发一个驱动去适配该款SD卡，但是这样很浪费人力。如果每个SD卡厂商都使用自己的协议，那么每支持一款SD卡，都需要重新写一套代码去适配它，那这工作量就很恐怖了。</p>\n<p>类似的，SD Host Controller Simplified Specification（以下简称：主机协议）用来标准化SD主机控制器，针对的是SD卡主机控制器厂商。这个协议不是强制的，在我们阅读SD驱动代码的时候，如果涉及到SD卡主机控制的代码，我们可能需要翻一下这篇文档，或者查阅SD卡主机控制器厂商提供给我们的文档（一般都是各大cpu芯片厂商提供给我们开发者文档）。</p>\n<p>本文的讲解的是卡协议，接下来，会有一些的英文夹杂在中文里面，因为有些名词，还是原汁原味的好，我翻译出来，没了那种韵味，水平有限，望大家谅解。</p>\n<h1 id=\"System-Features\"><a href=\"#System-Features\" class=\"headerlink\" title=\"System Features\"></a>System Features</h1><p>本大章节讲解SD的一些基本特征，包括SD卡的物理规格、容量、速度等方面。</p>\n<p>##Form-factor<br>目前市面上按物理规格来看，常见的SD卡有三种：</p>\n<ul>\n<li>标准的SD卡，这种卡比较大，在有些相机或者PC电脑上会使用；</li>\n<li>第二种是miniSD，这种卡我没怎么使用，不作详述；</li>\n<li>最后一种是叫TF卡，也称mirco SD，这种卡比较小，是我们最常接触的，像我们的手机里面使用的就是这种卡。很多人基本上都管我们手机使用的那种卡叫SD卡，这样的叫法实际上不够准确，更准确应该是叫TF卡，但是不管怎样，都没人会去计较，能理解就行。</li>\n</ul>\n<p>本文中，如果我说SD卡，都是泛指这三类SD卡，除非特意说明。并且如果特指，我会使用标准SD卡或者TF卡等名称代替。</p>\n<h2 id=\"Capacity-of-Memory\"><a href=\"#Capacity-of-Memory\" class=\"headerlink\" title=\"Capacity of Memory\"></a>Capacity of Memory</h2><p>SD卡按容量(Capacity)分类，可以分为标准容量卡、高容量卡，扩展容量卡，详细如下：</p>\n<blockquote>\n<ol>\n<li>Standard Capacity SD Memory Card (SDSC): 这种卡容量小于等于2GB </li>\n<li>High Capacity SD Memory Card (SDHC): 这种卡容量大于2GB，小于等于32GB</li>\n<li>Extended Capacity SD Memory Card (SDXC)：这种卡容量大于32GB， 小于等于2TB</li>\n</ol>\n</blockquote>\n<p>如果你买了一张16G或者32G的SD卡，你会发现SD卡上面印有”HC”字样，代表该卡是SDHC卡，同理，64G的SD卡上面印着”XC”，表示SDXC卡。</p>\n<h2 id=\"Voltage-range\"><a href=\"#Voltage-range\" class=\"headerlink\" title=\"Voltage range\"></a>Voltage range</h2><p>SD卡按供电范围划分，分两种：</p>\n<blockquote>\n<ol>\n<li>High Voltage SD Memory Card: 操作的电压范围在2.7-3.6V</li>\n<li>UHS-II SD Memory Card： 操作的电压范围VDD1: 2.7-3.6V, VDD2: 1.70-1.95V</li>\n</ol>\n</blockquote>\n<p>UHS-II类型的卡参考协议文档： SD Specifications Part 1 UHS-II Simplified Addendum</p>\n<h2 id=\"Bus-Speed-Mode-using-4-parallel-data-lines\"><a href=\"#Bus-Speed-Mode-using-4-parallel-data-lines\" class=\"headerlink\" title=\"Bus Speed Mode (using 4 parallel data lines)\"></a>Bus Speed Mode (using 4 parallel data lines)</h2><p>SD卡按总线速度模式来分，有下面几种：</p>\n<blockquote>\n<ol>\n<li>Default Speed mode: 3.3V供电模式，频率上限25MHz，速度上限 12.5MB/sec</li>\n<li>High Speed mode: 3.3V供电模式，频率上限50MHz，速度上限 25MB/sec</li>\n<li>SDR12： UHS-I卡， 1.8V供电模式，频率上限25MHz，速度上限 12.5MB/sec</li>\n<li>SDR25： UHS-I卡， 1.8V供电模式，频率上限50MHz，速度上限 25MB/sec</li>\n<li>SDR50： UHS-I卡， 1.8V供电模式，频率上限100MHz，速度上限 50MB/sec</li>\n<li>SDR104： UHS-I卡， 1.8V供电模式，频率上限208MHz，速度上限 104MB/sec</li>\n<li>DDR50： UHS-I卡， 1.8V供电模式，频率上限50MHz，性能上限 50MB/sec</li>\n<li>UHS156： UHS-II RCLK Frequency Range 26MHz - 52MHz, up to 1.56Gbps per lane.</li>\n</ol>\n</blockquote>\n<p>SDR(Single Date Rate), 一个周期只能采集一次数据，即一个bit，由于SD卡是4条数据线并行传输，所以一个周期能传输4bit，如果频率是50MHz（即1秒传输次数为50 000 000），那么1秒能传输的数据量为25MB（这里1MB为1 000 000 Byte)。所以这就是为什么各种SDR模式里面，频率上限是速度上限的两倍。而对于DDR(Double Data Rate)，在时钟上升沿和下降沿都可以采集数据，也就是单一周期内可读取或写入2次，因此4条并行数据线在一个周期内能传输8bit。</p>\n<h2 id=\"Speed-Class\"><a href=\"#Speed-Class\" class=\"headerlink\" title=\"Speed Class\"></a>Speed Class</h2><p>SD卡按照读写性能划分，有5种规格，每种规格后面的数字象征最小的读写速度：</p>\n<ul>\n<li>Class 0 - 这种卡没有性能要求</li>\n<li>Class 2 - 要求在 Default Speed mode 下，性能至少要达到（大于等于） 2MB/sec</li>\n<li>Class 4 - 要求在 Default Speed mode 下，性能至少要达到 4MB/sec</li>\n<li>Class 6 - 要求在 Default Speed mode 下，性能至少要达到 6MB/sec</li>\n<li>Class 10 - 要求在 High Speed mode 下，性能至少要达到 10MB/sec</li>\n</ul>\n<p>厂商卖的SD卡上面基本上都会印着一个用圆圈包围起来的数字10，表示该卡是Class 10 类型的卡。</p>\n<h1 id=\"Bus-Protocol\"><a href=\"#Bus-Protocol\" class=\"headerlink\" title=\"Bus Protocol\"></a>Bus Protocol</h1><p>在SD Bus上，有三种transaction：</p>\n<ul>\n<li><strong>Command</strong>: 一个命令代表着将开始一个操作。命令通过CMD线传输，方向从host到card。</li>\n<li><strong>Response</strong>: 响应是card对前一次host发送的命令的执行情况的反馈。也是通过CMD线传输，方向从card到host。</li>\n<li><strong>Data</strong>: 数据是通过4条data线传输的，方向可以从card到host，也可以从host到card。</li>\n</ul>\n<p>不管Command，还是Response或者Data，都开始于一个start bit （bit值0），结束于一个end bit（bit值1）。</p>\n<p>关于这块的内容不做过多解释了，详情自行阅读”Physical Layer Simplified Specification Version 4.10”文档 “3.6 Bus Protocl” 章节的内容。 </p>\n<h1 id=\"Registers\"><a href=\"#Registers\" class=\"headerlink\" title=\"Registers\"></a>Registers</h1><p>下图是SD卡的体系架构，可以看到内部包含了一系列的寄存器：</p>\n<div style=\"text-align:center\" markdown=\"1\"><br><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png\" alt=\"SD Memory Card Architecture\"><br></div>\n\n<p>各个寄存器的详细信息如下：</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Registers.png\" alt=\"SD Memory Card Registers\"></p>\n<h2 id=\"OCR-register\"><a href=\"#OCR-register\" class=\"headerlink\" title=\"OCR register\"></a>OCR register</h2><p>OCR寄存器保存着SD卡的工作电压范围。如果OCR寄存器的某位为1，表示卡支持该位对应的电压。最后一位表示卡上电后的状态(是否处于”忙状态”)，如果该位为0，表示忙，如果为1，表示处于空闲状态。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/ocr.png\" alt=\"OCR Register Definition\"></p>\n<h2 id=\"CID-register\"><a href=\"#CID-register\" class=\"headerlink\" title=\"CID register\"></a>CID register</h2><p>CID是一个128 bits的寄存器，该寄存器包含一个卡的标识信息。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/cid.png\" alt=\"The CID Fields\"></p>\n<h2 id=\"CSD-Register\"><a href=\"#CSD-Register\" class=\"headerlink\" title=\"CSD Register\"></a>CSD Register</h2><p>卡的描述数据寄存器（CSD）包含了访问该卡数据时的必要配置信息，比如the data format, error correction type, maximum data access time, device size 等等。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/csd.png\" alt=\"The CSD Register Fields (CSD Version 2.0)\"></p>\n<h2 id=\"RCA-register\"><a href=\"#RCA-register\" class=\"headerlink\" title=\"RCA register\"></a>RCA register</h2><p>卡的相对地址,该16位卡地址寄存器保存了卡在识别过程中发布的地址。该地址用于在主机识别卡后，利用该地址与卡进行通信。该寄存器只有在SD模式下才有效。</p>\n<h2 id=\"SCR-register\"><a href=\"#SCR-register\" class=\"headerlink\" title=\"SCR register\"></a>SCR register</h2><p>SD配置寄存器提供SD卡的特殊特性信息，其大小为64位。该寄存器由厂商编程，主机不能对它进行编程。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/scr.png\" alt=\"The SCR Fields\"></p>\n<h1 id=\"UHS\"><a href=\"#UHS\" class=\"headerlink\" title=\"UHS\"></a>UHS</h1><p>UHS（Ultra High Speed）是与SDXC同时推出的SD卡总线标准。此标准适用于SDHC和SDXC。</p>\n<p>UHS-I最高传输速度（理论值）为104MB/s。英文字母I代表该设备（SD卡或读卡器）支持UHS-I接口。英文字母U，包含数目字1，代表该设备读写速度达U1。</p>\n<p>UHS-II最高传输速度达312MB/s，是UHS-I的三倍。</p>\n<p>设备（如智能手机）必须支持UHS，才能保证达到U1或U3最低写入速度。</p>\n<p>下面介绍UHS-I初始化的命令序列流程。</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/Command-Sequence-to-Use-UHS-I.png\" alt=\"Command Sequence to Use UHS-I\"></p>\n<ul>\n<li>上电后，卡会处于3.3V signaling模式下。第一个CMD0命令会选择bus模式：SD模式或者SPI模式。只有在SD模式下，才能进入1.8V signaling模式。一旦卡进入1.8V signal模式，卡不能切换到SPI模式或者3.3V signal模式，除非重新上电。</li>\n<li>收到CMD0命令后，卡将进入空闲状态（Idle state），但是仍然工作在SDR12时序下。UHS-I只提供了SD模式，没有提供SPI模式。</li>\n<li>由于更高的总线速度需要低水平的signaling，对SDR50、DDR50和SDR104模式，UHS-I提供的signaling为1.8V。host会给卡提供3.3V的电压，并且提供1.8V signaling水平的电压给SDCLK、CMD和DAT[3:0]线，这几个都是从3.3V的电源线转换过来的。为了避免主机与卡之间的电压不匹配，signaling水平在初始化时的电压转换序列中就已经被改变了。主机和卡通过ACMD41命令来确认双方是否支持1.8V signaling模式。如果主机和卡都支持1.8V signaling模式，这就意味着UHS-I卡可用。</li>\n<li>UHS-I只能使用4-bit的bus模式，CMD42是个例外。如果卡被锁住了，就需要通过发送CMD42命令（1-bit模式）解锁，然后发送ACMD6命令将bus模式切换到4-bit。</li>\n<li>在卡解锁的情况下，CMD19命令执行在1.8V signaling的传输状态。其他情况，CMD19都会被当做非法命令。</li>\n</ul>\n<h1 id=\"SD-Memory-Card-Functional-Description\"><a href=\"#SD-Memory-Card-Functional-Description\" class=\"headerlink\" title=\"SD Memory Card Functional Description\"></a>SD Memory Card Functional Description</h1><p>对SD卡与主机(host)来说，有两种操作模式：</p>\n<ul>\n<li>Card identification mode: 对卡reset重置后，主机进入卡识别模式，对卡来说，在reset后，除非收到CMD3命令，否则卡一直处于该模式下。</li>\n<li>Data transfer mode: 当卡第一次发布它的RCA后，该卡将处于数据传输模式。而对主机来说，在它识别了bus线上的所有卡后，进入该模式。</li>\n</ul>\n<h2 id=\"Card-identification-mode\"><a href=\"#Card-identification-mode\" class=\"headerlink\" title=\"Card identification mode\"></a>Card identification mode</h2><h3 id=\"Operating-Condition-Validation\"><a href=\"#Operating-Condition-Validation\" class=\"headerlink\" title=\"Operating Condition Validation\"></a>Operating Condition Validation</h3><p>SD卡识别模式流程图如下：</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-State-Diagram_card-identification-mode.png\" alt=\"SD Memory Card State Diagram (card identification mode)\"></p>\n<ol>\n<li><p>在主机与卡通信之前，主机不清楚卡支持的电压范围，并且卡也不知道是否支持主机提供的供电电压。主机会以默认电压发送一个reset指令(CMD0),并且主机默认卡能支持该命令。然后，为了确认电压，主机接下来会发送一个CMD8命令。</p>\n</li>\n<li><p>为了验证SD卡接口的操作条件，主机通过发送SEND_IF_COND (CMD8)命令，去获取SD卡支持的工作电压范围。SD卡通过检测CMD8的参数部分来检查主机使用的工作电压，主机通过分析卡CMD8的response参数来确认SD卡是否可以在所给电压下工作，如果SD卡可以在指定电压下工作，则它的response里面会包含cmd8参数里面提供的电压 。如果不支持所给电压，则SD卡不会给出任何响应信息，并继续处于IDLE状态。如果要初始化SDHC和SDXC，在第一次发送ACMD41命令前，必须先发送CMD8。</p>\n</li>\n<li><p>SD_SEND_OP_COND (ACMD41)命令来识别或者拒绝不匹配host主机供电电压范围的卡。如果SD卡在主机规定的电压范围内不能实现数据传输，卡将放弃下一步的总线操作而进入不活动状态(Inactive State)。</p>\n</li>\n<li><p>主机发送ACMD41命令时，可以通过将该命令所带的OCR参数设置为0，用来查询卡支持的工作电压范围。当ACMD41被用于查询时，卡将忽略掉ACMD41里面的HCS参数。主机在查询到卡的工作电压后，也许会将该电压作为接下来发送的ACMD41命令的参数。</p>\n</li>\n<li><p>在整个初始化过程中，主机不允许改变正在操作的电压范围。</p>\n</li>\n</ol>\n<h3 id=\"Card-Initialization-and-Identification-Process\"><a href=\"#Card-Initialization-and-Identification-Process\" class=\"headerlink\" title=\"Card Initialization and Identification Process\"></a>Card Initialization and Identification Process</h3><p><img src=\"http://on61oh42c.bkt.clouddn.com/Card-Initialization-and-Identification-Flow.png\" alt=\"Card Initialization and Identification Flow (SD mode)\"></p>\n<ol>\n<li><p>当总线被激合后，主机就开始处理卡的初始化和识别。在主机发送SD_SEND_OP_COND(ACMD41)命令开始处理SD卡初始化时，主机会在ACMD41的参数中设置它的操作条件和设置OCR中的HCS位。HCS位被设置为1表示主机支持SDHC或者SDXC。HCS被设置为0表示主机不支持SDHC和SDXC。</p>\n</li>\n<li><p>卡利用OCR里面的busy位来通知主机ACMD41的初始化已经完成。如果busy位为0，表示卡还在初始化，如果busy位为1，说明初始化已经完成。主机会在1s的时间内，重复不断地发送ACMD41命令，直到busy位被置1为止。卡只有在第一次收到设置电压的ACMD41命令时，才会去检查操作条件和OCR中的HCS位。并且在重复发送ACMD41命令的这段时间里，主机不应该发送任何命令，除了CMD0。</p>\n</li>\n<li><p>如果卡能正确响应CMD8，之后，卡对ACMD41命令的响应会包含一个CCS字段，CCS在卡返回ready时（busy位置1）有效。CCS=0表示卡是SDSC，CCS=1表示卡是SDHC或者SDXC。</p>\n</li>\n<li><p>在ACMD41之后，主机会发送 ALL_SEND_CID  (CMD2)，获取卡的CID。在卡发送它的CID之后，卡进入识别状态（Identification State）。</p>\n</li>\n<li><p>接着，主机发送CMD3 (SEND_RELATIVE_ADDR)，请求卡发布卡的RCA。RCA是一个比CID短的，并且将来在数据传输模式中使用的地址。</p>\n</li>\n</ol>\n<h2 id=\"Data-Transfer-Mode\"><a href=\"#Data-Transfer-Mode\" class=\"headerlink\" title=\"Data Transfer Mode\"></a>Data Transfer Mode</h2><p>因为一些卡在识别模式（Identification Mode）下，对操作频率有限制，所以在识别模式结束前，主机的频率需要一直保持在 fOD。在数据传输模式（Data Transfer Mode），主机频率在fpp范围内是可执行的。</p>\n<p>主机必须发送SEND_CSD(CMD9)来获得卡规格数据寄存器(CSD)内容，获取像块大小、卡容量这类信息。</p>\n<p>SET_DSR(CMD4)广播命令配置所有识别到的卡的驱动阶段。它对DSR寄存器进行编程以适应应用的总线布局（长度）、总线上卡的数目和数据传输频率。clock rate也是在这个时候从fOD切到fpp。对卡和主机来说，SET_DSR(CMD4)命令是个可选。</p>\n<p>CMD7用于选择卡，并且将卡带入传输状态(Transfer State)。在同一个时间内，只有一张卡能进入传输状态。当发送的CMD7的RCA地址参数为”0x0000”，所有卡将跳回到准备状态（Stand-by State ）。</p>\n<p>SD卡数据传输模式的流程图如下：</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-State-Diagram_data-transfer-mode.png\" alt=\" SD Memory Card State Diagram (data transfer mode)\"></p>\n<p>对已经拥有RCA的卡来说，对它发送identification commands（比如ACMD41、CMD2），它将不会有任何回应。在数据传输模式下，主机与被选中的卡（使用定向命令）之间的数据传输都是点对点的。通过cmd线，所有定向命令（addressed commands）都会收到一个用于确认的response。</p>\n<p>下面是数据传输模式下关于数据传输的一些总结：</p>\n<ul>\n<li>在任何时候，所有的读命令集在执行过程中都可以被stop command (CMD12)打断。cmd12命令将会使数据传输终止，并且使卡退回到传输状态（Transfer State）。读命令集包括：block read(CMD17), multiple  block read(CMD18), send write protect(CMD30), send SCR(ACMD51) 和 general command in read mode (CMD56)。</li>\n<li>在任何时候，所有的写命令集在执行过程中都可以被stop command (CMD12)打断。写命令集包括： block write(CMD24 and CMD25), program CSD(CMD27), lock/unlock command(CMD42)和general command in write mode(CMD56)。</li>\n<li>一旦数据传输完成，卡就会退出数据写状态，并且进入正在编程状态（Programming State）（传输成功），或者进入传输状态（传输失败）。</li>\n<li>如果一个块写操作被打断，但是最后一个block的块长度和CRC有效的话，这块数据也将会被编程到卡里。</li>\n<li>卡也许会对块写操作提供缓存，这意味着，在一个block还在被编程的情况下，下一个block可以被发送这个卡里面。如果所有的写缓存都已经满了的话，只要卡还在正在编程状态，DAT0线就会一直保持在拉低状态。</li>\n<li>对写CSD、写保护和擦除操作来说，卡不会提供缓存。这意味着，在卡正忙于处理这其中任何一个命令时，卡不会接收任何发送到卡的数据。只要卡还在忙，DAT0线就会拉低，并且处于正在编程状态（Programming State）。</li>\n<li>当卡正在编程时，不允许任何一个参数设置命令集（Parameter set commands）。参数设置命令集包括： set block length(CMD16), erase block start(CMD32)和erase block end(CMD33)。</li>\n<li>当卡正在编程时，不允许任何一个读命令集。</li>\n<li>当将其他的卡从准备状态（Stand-by）切换到传输状态（使用CMD7），不会中断当前卡的擦除或者编程操作。当前卡将会切换到断开状态（Disconnect State），并且释放数据线。</li>\n<li>当卡正在编程或者待编程时，对其重置（发送CMD0或者CMD15），将会导致操作终止，并且可能会导致卡内的数据内容被破坏。因此主机有责任去禁止这样的操作。</li>\n</ul>\n<p>至此，本文关于SD卡协议的内容就介绍到这里。通过本文，可以对SD卡有个大概的了解，尤其是关于SD卡初始化这段内容。就SD卡协议这方面来说，了解一些基本的东西就行。在我们今后在遇到SD问题时需要时，可以翻出来看一下。水平有限，有些地方可能会出现错误，望各位能指出来，希望能和各位共同探讨技术方面的内容。</p>\n"},{"title":"Add Binary","_content":"\n# 描述\n[67. Add Binary](https://leetcode.com/problems/add-binary/)\n\nGiven two binary strings, return their sum (also a binary string).\n \nFor example,\na = \"11\"\nb = \"1\"\nReturn \"100\".\n\n# 题意\n 略\n \n# 分析\n略\n\n# 题解\n[\\[C/C++\\]](https://github.com/lightmen/leetcode/blob/master/c/string/add-binary.c):\n```\nchar* addBinary(char* a, char* b) {\n    char *ret;\n    int la,lb,lr;\n    int i,j,k;\n    int carry = 0;\n    int value;\n\n    la = strlen(a);\n    lb = strlen(b);\n    lr = (la > lb ? la : lb) + 2;\n\n    ret = (char *)malloc(sizeof(char) * lr);\n    ret[lr-1] = 0;\n    k = lr-2;\n    i = la - 1;\n    j = lb - 1;\n    while(i >= 0 && j >= 0){\n        value = (a[i--] - '0') + (b[j--] - '0')  + carry;\n        carry = value / 2;\n        value %= 2;\n        ret[k--] = '0' + value;\n    }\n\n    if(j >= 0){\n        i = j;\n        a = b;\n    }\n\n    while(i >= 0){\n        value = (a[i--] - '0') + carry;\n        carry = value / 2;\n        value %= 2;\n        ret[k--] = '0' + value;\n    }\n\n    if(carry)\n        ret[k--] = '1';\n\n    return ret + k + 1;\n}\n```\n\n[\\[Python\\]](https://github.com/lightmen/leetcode/blob/master/python/string/add-binary.py):\n```\nclass Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        indexa = len(a) - 1\n        indexb = len(b) - 1\n        res = ''\n        carry = 0\n        while indexa >= 0 or indexb >= 0:\n            x = int(a[indexa]) if indexa >= 0 else 0\n            y = int(b[indexb]) if indexb >= 0 else 0\n            value = x + y + carry\n            carry = value // 2\n            value = value % 2\n            res = str(value) + res\n            indexa, indexb = indexa - 1, indexb - 1\n\n        if carry == 1:\n            res = '1' + res\n\n        return res\n```\n\n\n","source":"_posts/Leetcode/add-binary.md","raw":"---\ntitle: Add Binary\ncategories: Leetcode\ntags:\n- Leetcode\n- C/C++\n- Python\n- Algorithm\n---\n\n# 描述\n[67. Add Binary](https://leetcode.com/problems/add-binary/)\n\nGiven two binary strings, return their sum (also a binary string).\n \nFor example,\na = \"11\"\nb = \"1\"\nReturn \"100\".\n\n# 题意\n 略\n \n# 分析\n略\n\n# 题解\n[\\[C/C++\\]](https://github.com/lightmen/leetcode/blob/master/c/string/add-binary.c):\n```\nchar* addBinary(char* a, char* b) {\n    char *ret;\n    int la,lb,lr;\n    int i,j,k;\n    int carry = 0;\n    int value;\n\n    la = strlen(a);\n    lb = strlen(b);\n    lr = (la > lb ? la : lb) + 2;\n\n    ret = (char *)malloc(sizeof(char) * lr);\n    ret[lr-1] = 0;\n    k = lr-2;\n    i = la - 1;\n    j = lb - 1;\n    while(i >= 0 && j >= 0){\n        value = (a[i--] - '0') + (b[j--] - '0')  + carry;\n        carry = value / 2;\n        value %= 2;\n        ret[k--] = '0' + value;\n    }\n\n    if(j >= 0){\n        i = j;\n        a = b;\n    }\n\n    while(i >= 0){\n        value = (a[i--] - '0') + carry;\n        carry = value / 2;\n        value %= 2;\n        ret[k--] = '0' + value;\n    }\n\n    if(carry)\n        ret[k--] = '1';\n\n    return ret + k + 1;\n}\n```\n\n[\\[Python\\]](https://github.com/lightmen/leetcode/blob/master/python/string/add-binary.py):\n```\nclass Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        indexa = len(a) - 1\n        indexb = len(b) - 1\n        res = ''\n        carry = 0\n        while indexa >= 0 or indexb >= 0:\n            x = int(a[indexa]) if indexa >= 0 else 0\n            y = int(b[indexb]) if indexb >= 0 else 0\n            value = x + y + carry\n            carry = value // 2\n            value = value % 2\n            res = str(value) + res\n            indexa, indexb = indexa - 1, indexb - 1\n\n        if carry == 1:\n            res = '1' + res\n\n        return res\n```\n\n\n","slug":"Leetcode/add-binary","published":1,"date":"2017-03-19T16:06:57.000Z","updated":"2017-03-20T16:54:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0jly9y2000ksdrrhj1o1vga","content":"<h1 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h1><p><a href=\"https://leetcode.com/problems/add-binary/\" target=\"_blank\" rel=\"external\">67. Add Binary</a></p>\n<p>Given two binary strings, return their sum (also a binary string).</p>\n<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p> 略</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>略</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><a href=\"https://github.com/lightmen/leetcode/blob/master/c/string/add-binary.c\" target=\"_blank\" rel=\"external\">[C/C++]</a>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">char* addBinary(char* a, char* b) &#123;</div><div class=\"line\">    char *ret;</div><div class=\"line\">    int la,lb,lr;</div><div class=\"line\">    int i,j,k;</div><div class=\"line\">    int carry = 0;</div><div class=\"line\">    int value;</div><div class=\"line\"></div><div class=\"line\">    la = strlen(a);</div><div class=\"line\">    lb = strlen(b);</div><div class=\"line\">    lr = (la &gt; lb ? la : lb) + 2;</div><div class=\"line\"></div><div class=\"line\">    ret = (char *)malloc(sizeof(char) * lr);</div><div class=\"line\">    ret[lr-1] = 0;</div><div class=\"line\">    k = lr-2;</div><div class=\"line\">    i = la - 1;</div><div class=\"line\">    j = lb - 1;</div><div class=\"line\">    while(i &gt;= 0 &amp;&amp; j &gt;= 0)&#123;</div><div class=\"line\">        value = (a[i--] - &apos;0&apos;) + (b[j--] - &apos;0&apos;)  + carry;</div><div class=\"line\">        carry = value / 2;</div><div class=\"line\">        value %= 2;</div><div class=\"line\">        ret[k--] = &apos;0&apos; + value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if(j &gt;= 0)&#123;</div><div class=\"line\">        i = j;</div><div class=\"line\">        a = b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    while(i &gt;= 0)&#123;</div><div class=\"line\">        value = (a[i--] - &apos;0&apos;) + carry;</div><div class=\"line\">        carry = value / 2;</div><div class=\"line\">        value %= 2;</div><div class=\"line\">        ret[k--] = &apos;0&apos; + value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if(carry)</div><div class=\"line\">        ret[k--] = &apos;1&apos;;</div><div class=\"line\"></div><div class=\"line\">    return ret + k + 1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/lightmen/leetcode/blob/master/python/string/add-binary.py\" target=\"_blank\" rel=\"external\">[Python]</a>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution(object):</div><div class=\"line\">    def addBinary(self, a, b):</div><div class=\"line\">        &quot;&quot;&quot;</div><div class=\"line\">        :type a: str</div><div class=\"line\">        :type b: str</div><div class=\"line\">        :rtype: str</div><div class=\"line\">        &quot;&quot;&quot;</div><div class=\"line\">        indexa = len(a) - 1</div><div class=\"line\">        indexb = len(b) - 1</div><div class=\"line\">        res = &apos;&apos;</div><div class=\"line\">        carry = 0</div><div class=\"line\">        while indexa &gt;= 0 or indexb &gt;= 0:</div><div class=\"line\">            x = int(a[indexa]) if indexa &gt;= 0 else 0</div><div class=\"line\">            y = int(b[indexb]) if indexb &gt;= 0 else 0</div><div class=\"line\">            value = x + y + carry</div><div class=\"line\">            carry = value // 2</div><div class=\"line\">            value = value % 2</div><div class=\"line\">            res = str(value) + res</div><div class=\"line\">            indexa, indexb = indexa - 1, indexb - 1</div><div class=\"line\"></div><div class=\"line\">        if carry == 1:</div><div class=\"line\">            res = &apos;1&apos; + res</div><div class=\"line\"></div><div class=\"line\">        return res</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h1><p><a href=\"https://leetcode.com/problems/add-binary/\">67. Add Binary</a></p>\n<p>Given two binary strings, return their sum (also a binary string).</p>\n<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p> 略</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>略</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><a href=\"https://github.com/lightmen/leetcode/blob/master/c/string/add-binary.c\">[C/C++]</a>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">char* addBinary(char* a, char* b) &#123;</div><div class=\"line\">    char *ret;</div><div class=\"line\">    int la,lb,lr;</div><div class=\"line\">    int i,j,k;</div><div class=\"line\">    int carry = 0;</div><div class=\"line\">    int value;</div><div class=\"line\"></div><div class=\"line\">    la = strlen(a);</div><div class=\"line\">    lb = strlen(b);</div><div class=\"line\">    lr = (la &gt; lb ? la : lb) + 2;</div><div class=\"line\"></div><div class=\"line\">    ret = (char *)malloc(sizeof(char) * lr);</div><div class=\"line\">    ret[lr-1] = 0;</div><div class=\"line\">    k = lr-2;</div><div class=\"line\">    i = la - 1;</div><div class=\"line\">    j = lb - 1;</div><div class=\"line\">    while(i &gt;= 0 &amp;&amp; j &gt;= 0)&#123;</div><div class=\"line\">        value = (a[i--] - &apos;0&apos;) + (b[j--] - &apos;0&apos;)  + carry;</div><div class=\"line\">        carry = value / 2;</div><div class=\"line\">        value %= 2;</div><div class=\"line\">        ret[k--] = &apos;0&apos; + value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if(j &gt;= 0)&#123;</div><div class=\"line\">        i = j;</div><div class=\"line\">        a = b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    while(i &gt;= 0)&#123;</div><div class=\"line\">        value = (a[i--] - &apos;0&apos;) + carry;</div><div class=\"line\">        carry = value / 2;</div><div class=\"line\">        value %= 2;</div><div class=\"line\">        ret[k--] = &apos;0&apos; + value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if(carry)</div><div class=\"line\">        ret[k--] = &apos;1&apos;;</div><div class=\"line\"></div><div class=\"line\">    return ret + k + 1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/lightmen/leetcode/blob/master/python/string/add-binary.py\">[Python]</a>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution(object):</div><div class=\"line\">    def addBinary(self, a, b):</div><div class=\"line\">        &quot;&quot;&quot;</div><div class=\"line\">        :type a: str</div><div class=\"line\">        :type b: str</div><div class=\"line\">        :rtype: str</div><div class=\"line\">        &quot;&quot;&quot;</div><div class=\"line\">        indexa = len(a) - 1</div><div class=\"line\">        indexb = len(b) - 1</div><div class=\"line\">        res = &apos;&apos;</div><div class=\"line\">        carry = 0</div><div class=\"line\">        while indexa &gt;= 0 or indexb &gt;= 0:</div><div class=\"line\">            x = int(a[indexa]) if indexa &gt;= 0 else 0</div><div class=\"line\">            y = int(b[indexb]) if indexb &gt;= 0 else 0</div><div class=\"line\">            value = x + y + carry</div><div class=\"line\">            carry = value // 2</div><div class=\"line\">            value = value % 2</div><div class=\"line\">            res = str(value) + res</div><div class=\"line\">            indexa, indexb = indexa - 1, indexb - 1</div><div class=\"line\"></div><div class=\"line\">        if carry == 1:</div><div class=\"line\">            res = &apos;1&apos; + res</div><div class=\"line\"></div><div class=\"line\">        return res</div></pre></td></tr></table></figure></p>\n"},{"title":"Assign Cookies","_content":"\n# 描述\n[455. Assign Cookies](https://leetcode.com/problems/assign-cookies/)\n\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n**Note:**\nYou may assume the greed factor is always positive. \nYou cannot assign more than one cookie to one child. \n\n**Example 1:** \n```\nInput: [1,2,3], [1,1] \n\nOutput: 1 \n\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \n\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. \n\nYou need to output 1. \n```\n\n**Example 2:**\n```\nInput: [1,2], [1,2,3] \n\nOutput: 2 \n\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \n\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \n\nYou need to output 2. \n```\n\n# 题意\n假设你是一位很赞的家长想要给孩子一些饼干。但是，你只能至多给每个孩子一个饼干。孩子i的贪婪因子为gi，意思是他所满意的饼干的最小尺寸；每一个饼干j的尺寸为sj。如果sj >= gi，我们就可以把饼干j分给孩子i，然后孩子i会很满意。你的目标是最大化分到饼干的孩子的个数。\n\n**注意：**\n\n可以假设贪婪因子都是正数。\n不可以为一个孩子分配多个饼干。\n\n# 分析\n贪心算法\n\n# 题解\n[\\[C/C++\\]](https://github.com/lightmen/leetcode/blob/master/c/greedy/assign-cookies.c):\n```\nint cmp(const void *a, const void *b)\n{\n    return *(int *)a - *(int *)b;\n}\n\nint findContentChildren(int* g, int gSize, int* s, int sSize) {\n    int i = gSize - 1;\n    int j = sSize - 1;\n    int ret = 0;\n\n    qsort(g, gSize, sizeof(int), cmp);\n    qsort(s, sSize, sizeof(int), cmp);\n\n    while(i >= 0 && j >= 0){\n        if(s[j] >= g[i]){\n            j--;\n            ret++;\n        }\n        i--;\n    }\n\n    return ret;\n}\n```\n\n[\\[Python\\]](https://github.com/lightmen/leetcode/blob/master/python/greedy/assign-cookies.py):\n```\nclass Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        i, j = len(g) - 1, len(s) - 1\n        g, s = sorted(g), sorted(s)\n        ret = 0\n\n        while min(i, j) >= 0:\n            if s[j] >= g[i]:\n                ret += 1\n                j -= 1\n\n            i -= 1\n\n        return ret\n```\n\n","source":"_posts/Leetcode/assign-cookies.md","raw":"---\ntitle: Assign Cookies\ncategories: Leetcode\ntags:\n- Leetcode\n- C/C++\n- Python\n- Algorithm\n- 贪心算法\n---\n\n# 描述\n[455. Assign Cookies](https://leetcode.com/problems/assign-cookies/)\n\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n**Note:**\nYou may assume the greed factor is always positive. \nYou cannot assign more than one cookie to one child. \n\n**Example 1:** \n```\nInput: [1,2,3], [1,1] \n\nOutput: 1 \n\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \n\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. \n\nYou need to output 1. \n```\n\n**Example 2:**\n```\nInput: [1,2], [1,2,3] \n\nOutput: 2 \n\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \n\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \n\nYou need to output 2. \n```\n\n# 题意\n假设你是一位很赞的家长想要给孩子一些饼干。但是，你只能至多给每个孩子一个饼干。孩子i的贪婪因子为gi，意思是他所满意的饼干的最小尺寸；每一个饼干j的尺寸为sj。如果sj >= gi，我们就可以把饼干j分给孩子i，然后孩子i会很满意。你的目标是最大化分到饼干的孩子的个数。\n\n**注意：**\n\n可以假设贪婪因子都是正数。\n不可以为一个孩子分配多个饼干。\n\n# 分析\n贪心算法\n\n# 题解\n[\\[C/C++\\]](https://github.com/lightmen/leetcode/blob/master/c/greedy/assign-cookies.c):\n```\nint cmp(const void *a, const void *b)\n{\n    return *(int *)a - *(int *)b;\n}\n\nint findContentChildren(int* g, int gSize, int* s, int sSize) {\n    int i = gSize - 1;\n    int j = sSize - 1;\n    int ret = 0;\n\n    qsort(g, gSize, sizeof(int), cmp);\n    qsort(s, sSize, sizeof(int), cmp);\n\n    while(i >= 0 && j >= 0){\n        if(s[j] >= g[i]){\n            j--;\n            ret++;\n        }\n        i--;\n    }\n\n    return ret;\n}\n```\n\n[\\[Python\\]](https://github.com/lightmen/leetcode/blob/master/python/greedy/assign-cookies.py):\n```\nclass Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        i, j = len(g) - 1, len(s) - 1\n        g, s = sorted(g), sorted(s)\n        ret = 0\n\n        while min(i, j) >= 0:\n            if s[j] >= g[i]:\n                ret += 1\n                j -= 1\n\n            i -= 1\n\n        return ret\n```\n\n","slug":"Leetcode/assign-cookies","published":1,"date":"2017-03-20T16:21:17.000Z","updated":"2017-03-20T16:54:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0jly9y3000lsdrrqo04a4v0","content":"<h1 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h1><p><a href=\"https://leetcode.com/problems/assign-cookies/\" target=\"_blank\" rel=\"external\">455. Assign Cookies</a></p>\n<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj &gt;= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.</p>\n<p><strong>Note:</strong><br>You may assume the greed factor is always positive.<br>You cannot assign more than one cookie to one child. </p>\n<p><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1,2,3], [1,1] </div><div class=\"line\"></div><div class=\"line\">Output: 1 </div><div class=\"line\"></div><div class=\"line\">Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. </div><div class=\"line\"></div><div class=\"line\">And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. </div><div class=\"line\"></div><div class=\"line\">You need to output 1.</div></pre></td></tr></table></figure></p>\n<p><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1,2], [1,2,3] </div><div class=\"line\"></div><div class=\"line\">Output: 2 </div><div class=\"line\"></div><div class=\"line\">Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. </div><div class=\"line\"></div><div class=\"line\">You have 3 cookies and their sizes are big enough to gratify all of the children, </div><div class=\"line\"></div><div class=\"line\">You need to output 2.</div></pre></td></tr></table></figure></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>假设你是一位很赞的家长想要给孩子一些饼干。但是，你只能至多给每个孩子一个饼干。孩子i的贪婪因子为gi，意思是他所满意的饼干的最小尺寸；每一个饼干j的尺寸为sj。如果sj &gt;= gi，我们就可以把饼干j分给孩子i，然后孩子i会很满意。你的目标是最大化分到饼干的孩子的个数。</p>\n<p><strong>注意：</strong></p>\n<p>可以假设贪婪因子都是正数。<br>不可以为一个孩子分配多个饼干。</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>贪心算法</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><a href=\"https://github.com/lightmen/leetcode/blob/master/c/greedy/assign-cookies.c\" target=\"_blank\" rel=\"external\">[C/C++]</a>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">int cmp(const void *a, const void *b)</div><div class=\"line\">&#123;</div><div class=\"line\">    return *(int *)a - *(int *)b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int findContentChildren(int* g, int gSize, int* s, int sSize) &#123;</div><div class=\"line\">    int i = gSize - 1;</div><div class=\"line\">    int j = sSize - 1;</div><div class=\"line\">    int ret = 0;</div><div class=\"line\"></div><div class=\"line\">    qsort(g, gSize, sizeof(int), cmp);</div><div class=\"line\">    qsort(s, sSize, sizeof(int), cmp);</div><div class=\"line\"></div><div class=\"line\">    while(i &gt;= 0 &amp;&amp; j &gt;= 0)&#123;</div><div class=\"line\">        if(s[j] &gt;= g[i])&#123;</div><div class=\"line\">            j--;</div><div class=\"line\">            ret++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        i--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/lightmen/leetcode/blob/master/python/greedy/assign-cookies.py\" target=\"_blank\" rel=\"external\">[Python]</a>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution(object):</div><div class=\"line\">    def findContentChildren(self, g, s):</div><div class=\"line\">        &quot;&quot;&quot;</div><div class=\"line\">        :type g: List[int]</div><div class=\"line\">        :type s: List[int]</div><div class=\"line\">        :rtype: int</div><div class=\"line\">        &quot;&quot;&quot;</div><div class=\"line\">        i, j = len(g) - 1, len(s) - 1</div><div class=\"line\">        g, s = sorted(g), sorted(s)</div><div class=\"line\">        ret = 0</div><div class=\"line\"></div><div class=\"line\">        while min(i, j) &gt;= 0:</div><div class=\"line\">            if s[j] &gt;= g[i]:</div><div class=\"line\">                ret += 1</div><div class=\"line\">                j -= 1</div><div class=\"line\"></div><div class=\"line\">            i -= 1</div><div class=\"line\"></div><div class=\"line\">        return ret</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h1><p><a href=\"https://leetcode.com/problems/assign-cookies/\">455. Assign Cookies</a></p>\n<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj &gt;= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.</p>\n<p><strong>Note:</strong><br>You may assume the greed factor is always positive.<br>You cannot assign more than one cookie to one child. </p>\n<p><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1,2,3], [1,1] </div><div class=\"line\"></div><div class=\"line\">Output: 1 </div><div class=\"line\"></div><div class=\"line\">Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. </div><div class=\"line\"></div><div class=\"line\">And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. </div><div class=\"line\"></div><div class=\"line\">You need to output 1.</div></pre></td></tr></table></figure></p>\n<p><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1,2], [1,2,3] </div><div class=\"line\"></div><div class=\"line\">Output: 2 </div><div class=\"line\"></div><div class=\"line\">Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. </div><div class=\"line\"></div><div class=\"line\">You have 3 cookies and their sizes are big enough to gratify all of the children, </div><div class=\"line\"></div><div class=\"line\">You need to output 2.</div></pre></td></tr></table></figure></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>假设你是一位很赞的家长想要给孩子一些饼干。但是，你只能至多给每个孩子一个饼干。孩子i的贪婪因子为gi，意思是他所满意的饼干的最小尺寸；每一个饼干j的尺寸为sj。如果sj &gt;= gi，我们就可以把饼干j分给孩子i，然后孩子i会很满意。你的目标是最大化分到饼干的孩子的个数。</p>\n<p><strong>注意：</strong></p>\n<p>可以假设贪婪因子都是正数。<br>不可以为一个孩子分配多个饼干。</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>贪心算法</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><a href=\"https://github.com/lightmen/leetcode/blob/master/c/greedy/assign-cookies.c\">[C/C++]</a>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">int cmp(const void *a, const void *b)</div><div class=\"line\">&#123;</div><div class=\"line\">    return *(int *)a - *(int *)b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int findContentChildren(int* g, int gSize, int* s, int sSize) &#123;</div><div class=\"line\">    int i = gSize - 1;</div><div class=\"line\">    int j = sSize - 1;</div><div class=\"line\">    int ret = 0;</div><div class=\"line\"></div><div class=\"line\">    qsort(g, gSize, sizeof(int), cmp);</div><div class=\"line\">    qsort(s, sSize, sizeof(int), cmp);</div><div class=\"line\"></div><div class=\"line\">    while(i &gt;= 0 &amp;&amp; j &gt;= 0)&#123;</div><div class=\"line\">        if(s[j] &gt;= g[i])&#123;</div><div class=\"line\">            j--;</div><div class=\"line\">            ret++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        i--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/lightmen/leetcode/blob/master/python/greedy/assign-cookies.py\">[Python]</a>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution(object):</div><div class=\"line\">    def findContentChildren(self, g, s):</div><div class=\"line\">        &quot;&quot;&quot;</div><div class=\"line\">        :type g: List[int]</div><div class=\"line\">        :type s: List[int]</div><div class=\"line\">        :rtype: int</div><div class=\"line\">        &quot;&quot;&quot;</div><div class=\"line\">        i, j = len(g) - 1, len(s) - 1</div><div class=\"line\">        g, s = sorted(g), sorted(s)</div><div class=\"line\">        ret = 0</div><div class=\"line\"></div><div class=\"line\">        while min(i, j) &gt;= 0:</div><div class=\"line\">            if s[j] &gt;= g[i]:</div><div class=\"line\">                ret += 1</div><div class=\"line\">                j -= 1</div><div class=\"line\"></div><div class=\"line\">            i -= 1</div><div class=\"line\"></div><div class=\"line\">        return ret</div></pre></td></tr></table></figure></p>\n"},{"title":"linux kernel中读写文件","_content":"\n\n# 头文件\n```\n#include <linux/fs.h>\n#include <asm/segment.h>\n#include <asm/uaccess.h>\n#include <linux/buffer_head.h>\n```\n\n# 打开文件\n```\nstruct file* file_open(const char* path, int flags, int rights) {\n    struct file* filp = NULL;\n    mm_segment_t oldfs;\n    int err = 0;\n\n    oldfs = get_fs();\n    set_fs(get_ds());\n    filp = filp_open(path, flags, rights);\n    set_fs(oldfs);\n    if(IS_ERR(filp)) {\n        err = PTR_ERR(filp);\n        return NULL;\n    }\n    return filp;\n}\n```\n\n# 关闭文件\n```\nvoid file_close(struct file* file) {\n    filp_close(file, NULL);\n}\n```\n\n# 读文件\n```\nint file_read(struct file* file, unsigned long long offset, unsigned char* data, unsigned int size) {\n    mm_segment_t oldfs;\n    int ret;\n\n    oldfs = get_fs();\n    set_fs(get_ds());\n\n    ret = vfs_read(file, data, size, &offset);\n\n    set_fs(oldfs);\n    return ret;\n}\n```\n\n# 写文件\n```\nint file_write(struct file* file,vunsigned long long offset, unsigned char* data, unsigned int size) {\n    mm_segment_t oldfs;\n    int ret;\n\n    oldfs = get_fs(); \n    set_fs(get_ds());\n\n    ret = vfs_write(file, data, size, &offset);\n\n    set_fs(oldfs);\n    return ret;\n}\n```\n\n# 同步文件\n```\nint file_sync(struct file* file) {\n    vfs_fsync(file, 0);\n    return 0;\n}\n```\n\n备注：\nget_ds():  获得kernel的内存访问地址范围\nget_fs():  取得当前的地址访问限制值\nset_fs():  设置当前的地址访问值\n\n","source":"_posts/kernel/linux kernel中读写文件.md","raw":"---\ntitle: linux kernel中读写文件\ncategories: kernel\ntags:\n- 文件系统\n- Linux\n- kernel\n---\n\n\n# 头文件\n```\n#include <linux/fs.h>\n#include <asm/segment.h>\n#include <asm/uaccess.h>\n#include <linux/buffer_head.h>\n```\n\n# 打开文件\n```\nstruct file* file_open(const char* path, int flags, int rights) {\n    struct file* filp = NULL;\n    mm_segment_t oldfs;\n    int err = 0;\n\n    oldfs = get_fs();\n    set_fs(get_ds());\n    filp = filp_open(path, flags, rights);\n    set_fs(oldfs);\n    if(IS_ERR(filp)) {\n        err = PTR_ERR(filp);\n        return NULL;\n    }\n    return filp;\n}\n```\n\n# 关闭文件\n```\nvoid file_close(struct file* file) {\n    filp_close(file, NULL);\n}\n```\n\n# 读文件\n```\nint file_read(struct file* file, unsigned long long offset, unsigned char* data, unsigned int size) {\n    mm_segment_t oldfs;\n    int ret;\n\n    oldfs = get_fs();\n    set_fs(get_ds());\n\n    ret = vfs_read(file, data, size, &offset);\n\n    set_fs(oldfs);\n    return ret;\n}\n```\n\n# 写文件\n```\nint file_write(struct file* file,vunsigned long long offset, unsigned char* data, unsigned int size) {\n    mm_segment_t oldfs;\n    int ret;\n\n    oldfs = get_fs(); \n    set_fs(get_ds());\n\n    ret = vfs_write(file, data, size, &offset);\n\n    set_fs(oldfs);\n    return ret;\n}\n```\n\n# 同步文件\n```\nint file_sync(struct file* file) {\n    vfs_fsync(file, 0);\n    return 0;\n}\n```\n\n备注：\nget_ds():  获得kernel的内存访问地址范围\nget_fs():  取得当前的地址访问限制值\nset_fs():  设置当前的地址访问值\n\n","slug":"kernel/linux kernel中读写文件","published":1,"date":"2017-03-22T11:50:59.000Z","updated":"2017-03-22T12:01:32.000Z","_id":"cj0kwuzud0000ptrrg45zb7yk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;linux/fs.h&gt;</div><div class=\"line\">#include &lt;asm/segment.h&gt;</div><div class=\"line\">#include &lt;asm/uaccess.h&gt;</div><div class=\"line\">#include &lt;linux/buffer_head.h&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct file* file_open(const char* path, int flags, int rights) &#123;</div><div class=\"line\">    struct file* filp = NULL;</div><div class=\"line\">    mm_segment_t oldfs;</div><div class=\"line\">    int err = 0;</div><div class=\"line\"></div><div class=\"line\">    oldfs = get_fs();</div><div class=\"line\">    set_fs(get_ds());</div><div class=\"line\">    filp = filp_open(path, flags, rights);</div><div class=\"line\">    set_fs(oldfs);</div><div class=\"line\">    if(IS_ERR(filp)) &#123;</div><div class=\"line\">        err = PTR_ERR(filp);</div><div class=\"line\">        return NULL;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return filp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"关闭文件\"><a href=\"#关闭文件\" class=\"headerlink\" title=\"关闭文件\"></a>关闭文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">void file_close(struct file* file) &#123;</div><div class=\"line\">    filp_close(file, NULL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">int file_read(struct file* file, unsigned long long offset, unsigned char* data, unsigned int size) &#123;</div><div class=\"line\">    mm_segment_t oldfs;</div><div class=\"line\">    int ret;</div><div class=\"line\"></div><div class=\"line\">    oldfs = get_fs();</div><div class=\"line\">    set_fs(get_ds());</div><div class=\"line\"></div><div class=\"line\">    ret = vfs_read(file, data, size, &amp;offset);</div><div class=\"line\"></div><div class=\"line\">    set_fs(oldfs);</div><div class=\"line\">    return ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">int file_write(struct file* file,vunsigned long long offset, unsigned char* data, unsigned int size) &#123;</div><div class=\"line\">    mm_segment_t oldfs;</div><div class=\"line\">    int ret;</div><div class=\"line\"></div><div class=\"line\">    oldfs = get_fs(); </div><div class=\"line\">    set_fs(get_ds());</div><div class=\"line\"></div><div class=\"line\">    ret = vfs_write(file, data, size, &amp;offset);</div><div class=\"line\"></div><div class=\"line\">    set_fs(oldfs);</div><div class=\"line\">    return ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"同步文件\"><a href=\"#同步文件\" class=\"headerlink\" title=\"同步文件\"></a>同步文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int file_sync(struct file* file) &#123;</div><div class=\"line\">    vfs_fsync(file, 0);</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>备注：<br>get_ds():  获得kernel的内存访问地址范围<br>get_fs():  取得当前的地址访问限制值<br>set_fs():  设置当前的地址访问值</p>\n","excerpt":"","more":"<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;linux/fs.h&gt;</div><div class=\"line\">#include &lt;asm/segment.h&gt;</div><div class=\"line\">#include &lt;asm/uaccess.h&gt;</div><div class=\"line\">#include &lt;linux/buffer_head.h&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct file* file_open(const char* path, int flags, int rights) &#123;</div><div class=\"line\">    struct file* filp = NULL;</div><div class=\"line\">    mm_segment_t oldfs;</div><div class=\"line\">    int err = 0;</div><div class=\"line\"></div><div class=\"line\">    oldfs = get_fs();</div><div class=\"line\">    set_fs(get_ds());</div><div class=\"line\">    filp = filp_open(path, flags, rights);</div><div class=\"line\">    set_fs(oldfs);</div><div class=\"line\">    if(IS_ERR(filp)) &#123;</div><div class=\"line\">        err = PTR_ERR(filp);</div><div class=\"line\">        return NULL;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return filp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"关闭文件\"><a href=\"#关闭文件\" class=\"headerlink\" title=\"关闭文件\"></a>关闭文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">void file_close(struct file* file) &#123;</div><div class=\"line\">    filp_close(file, NULL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">int file_read(struct file* file, unsigned long long offset, unsigned char* data, unsigned int size) &#123;</div><div class=\"line\">    mm_segment_t oldfs;</div><div class=\"line\">    int ret;</div><div class=\"line\"></div><div class=\"line\">    oldfs = get_fs();</div><div class=\"line\">    set_fs(get_ds());</div><div class=\"line\"></div><div class=\"line\">    ret = vfs_read(file, data, size, &amp;offset);</div><div class=\"line\"></div><div class=\"line\">    set_fs(oldfs);</div><div class=\"line\">    return ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">int file_write(struct file* file,vunsigned long long offset, unsigned char* data, unsigned int size) &#123;</div><div class=\"line\">    mm_segment_t oldfs;</div><div class=\"line\">    int ret;</div><div class=\"line\"></div><div class=\"line\">    oldfs = get_fs(); </div><div class=\"line\">    set_fs(get_ds());</div><div class=\"line\"></div><div class=\"line\">    ret = vfs_write(file, data, size, &amp;offset);</div><div class=\"line\"></div><div class=\"line\">    set_fs(oldfs);</div><div class=\"line\">    return ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"同步文件\"><a href=\"#同步文件\" class=\"headerlink\" title=\"同步文件\"></a>同步文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int file_sync(struct file* file) &#123;</div><div class=\"line\">    vfs_fsync(file, 0);</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>备注：<br>get_ds():  获得kernel的内存访问地址范围<br>get_fs():  取得当前的地址访问限制值<br>set_fs():  设置当前的地址访问值</p>\n"},{"title":"Hexo + Github Pages搭建个人博客","_content":"\n# 关于Hexo与Github Pages\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n而Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io或者自定义域名来发布站点。\n\n利用Github Pages和Hexo，我们可以搭建自己的博客网站，可以参考示例: [lightmen.github.io](https://lightmen.github.io/)。接下来我将分步骤介绍如何用GitHub Pages和Hexo搭建个人网站。\n\n# 安装Hexo\n安装Hexo很简单，但是在安装前，必须确保你的电脑中已安装下列两个应用程序:\n\n- [Node.js](https://nodejs.org/en/)\n- [Git](https://git-scm.com/)\n\n(备注：在终端中输入 npm 命令可以验证电脑中是否安装了Node.js，输入git命令可以验证是否安装了Git，如果没有安装相应的程序，属于npm或者git命令，终端会提示找不到该命令)。\n\n如果您的电脑中已经安装了上述两个程序，那么恭喜你！接下来你只需要在终端中输入如下命令就可以完成 Hexo 的安装：\n ``` bash\n $ npm install -g hexo-cli\n ```\n\n Hexo安装完成后，接下来在指定文件夹中新建需要的文件，我们可以假设有个hexo目录，然后在该目录里面创建一个blog文件：\n ``` bash\n $ cd hexo\n $ mkdir blog\n $ hexo init blog\n $ cd blog\n $ npm install\n ```\n\n 新建完成后，在blog目录下面会生成如下文件：\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n这些文件的具体释义，参考 hexo.io官网中[配置](https://hexo.io/zh-cn/docs/configuration.html)一节, 这里不做过多解释。\n\n继续操作，在终端中输入如下命令：\n``` bash\n$ hexo g\n$ hexo s\n```\n\n提示: \"Hexo is running at http://localhost:4000/. \"  在浏览器中打开http://localhost:4000/, 你将会看到:\n![landscape](http://note.youdao.com/yws/api/personal/file/WEB109a2e85adcbf21b729cc70c8df2ef85?method=download&shareKey=e3cf0fdd4ce77bfbc0dcf0b559f3a529)\n\n至此，Hexo的本地配置基本完成。\n\n# 配置Github Pages\n\n配置Github Pages，首先你得有个github账号，如果没有，请进入 [GitHub网站](https://github.com/)注册，登陆进去。\n\n登陆网站后，在网站右上角的\"+\"图标那里，点击 \"[New repository](https://github.com/new)\", 创建一个仓库。仓库名必须为你的用户名＋ github.io，比如我的github用户名为：lightmen， 那么我创建的仓库名就必须为：lightmen.github.io。 创建好后，可以试着在浏览器里面输入 https://yourname.github.io/, 确认是否可以正常访问(当然，刚刚创建的仓库，里面什么内容都没有，浏览器会显示空白)。\n\n另外，如果你是第一次使用github，你必须在本地配置好你的git环境，确保你可以往github上面的仓库传文件。这里，不做过多介绍，网上一堆可参考的教程。\n\n# 部署到Github Pages\n\n这一节的内容可以参考Hexo官方文档中[部署部分](https://hexo.io/zh-cn/docs/deployment.html)，我这里分三个步骤讲解。\n\n1. 运行如下命令，安装[hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)。\n``` bash\n$ npm install hexo-deployer-git --save\n```\n2. 然后打开Hexo主文件夹(备注：hexo init命令设置的那个文件夹）中的_config.yml, 设置其中的deploy参数，以我的为例，设置的内容如下：\n```\ndeploy:\n  type: git\n  repo: https://github.com/lightmen/lightmen.github.io.git\n  branch: master\n```\n\n3. 然后在当前目录下，打开终端，输入下面命令，将网站部署到服务器上：\n``` bash\n$ hexo d\n```\n随后，按照提示输入github的账号和密码，上传文件。网站部署到服务区后，就可以通过 https://yourname.github.io/ 来访问自己刚刚上传的网站。\n\n# 添加新文章\n\n在网站中添加文章，通过运行以下命令创建POST：\n``` bash\n$ hexo n “your post name”\n$ hexo g\n$ hexo s\n```\n然后可以在浏览器查看修改的内容。\n\n打开Hexo主文件夹下的source 目录，所有的文章都会以md形式保存在_post文件夹中，只要在 _post文件夹中新建md类型的文档，就能在执行hexo g的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：\n```\ntitle: hello-world   //在此处添加你的标题。\ndate: 2017-03-18 22:15:29   //在此处输入你编辑这篇文章的时间。\ncategories: Exercise   //在此处输入这篇文章的分类。\ntoc: true  //在此处设定是否开启目录，需要主题支持。\n```\n\n# 进阶\n如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂。我们还可以进行一些设置主题、更换域名等操作，调整自己的博客，这部分内容待续。\n\n参考文档：\n\n- [使用Hexo搭建个人博客](http://www.jianshu.com/p/f4dce0e76886)\n\n- [史上最详细的Hexo博客搭建图文教程](https://xuanwo.org/2015/03/26/hexo-intor/)\n\n- [手把手教你使用Hexo + Github Pages搭建个人独立博客](https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/)\n\n- [Hexo使用指南](http://www.jianshu.com/p/84a8384be1ae)\n\n\n","source":"_posts/环境搭建/Hexo + Github Pages搭建个人博客.md","raw":"---\ntitle: Hexo + Github Pages搭建个人博客\ncategories: 环境搭建\ntags:\n- Hexo\n---\n\n# 关于Hexo与Github Pages\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n而Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io或者自定义域名来发布站点。\n\n利用Github Pages和Hexo，我们可以搭建自己的博客网站，可以参考示例: [lightmen.github.io](https://lightmen.github.io/)。接下来我将分步骤介绍如何用GitHub Pages和Hexo搭建个人网站。\n\n# 安装Hexo\n安装Hexo很简单，但是在安装前，必须确保你的电脑中已安装下列两个应用程序:\n\n- [Node.js](https://nodejs.org/en/)\n- [Git](https://git-scm.com/)\n\n(备注：在终端中输入 npm 命令可以验证电脑中是否安装了Node.js，输入git命令可以验证是否安装了Git，如果没有安装相应的程序，属于npm或者git命令，终端会提示找不到该命令)。\n\n如果您的电脑中已经安装了上述两个程序，那么恭喜你！接下来你只需要在终端中输入如下命令就可以完成 Hexo 的安装：\n ``` bash\n $ npm install -g hexo-cli\n ```\n\n Hexo安装完成后，接下来在指定文件夹中新建需要的文件，我们可以假设有个hexo目录，然后在该目录里面创建一个blog文件：\n ``` bash\n $ cd hexo\n $ mkdir blog\n $ hexo init blog\n $ cd blog\n $ npm install\n ```\n\n 新建完成后，在blog目录下面会生成如下文件：\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n这些文件的具体释义，参考 hexo.io官网中[配置](https://hexo.io/zh-cn/docs/configuration.html)一节, 这里不做过多解释。\n\n继续操作，在终端中输入如下命令：\n``` bash\n$ hexo g\n$ hexo s\n```\n\n提示: \"Hexo is running at http://localhost:4000/. \"  在浏览器中打开http://localhost:4000/, 你将会看到:\n![landscape](http://note.youdao.com/yws/api/personal/file/WEB109a2e85adcbf21b729cc70c8df2ef85?method=download&shareKey=e3cf0fdd4ce77bfbc0dcf0b559f3a529)\n\n至此，Hexo的本地配置基本完成。\n\n# 配置Github Pages\n\n配置Github Pages，首先你得有个github账号，如果没有，请进入 [GitHub网站](https://github.com/)注册，登陆进去。\n\n登陆网站后，在网站右上角的\"+\"图标那里，点击 \"[New repository](https://github.com/new)\", 创建一个仓库。仓库名必须为你的用户名＋ github.io，比如我的github用户名为：lightmen， 那么我创建的仓库名就必须为：lightmen.github.io。 创建好后，可以试着在浏览器里面输入 https://yourname.github.io/, 确认是否可以正常访问(当然，刚刚创建的仓库，里面什么内容都没有，浏览器会显示空白)。\n\n另外，如果你是第一次使用github，你必须在本地配置好你的git环境，确保你可以往github上面的仓库传文件。这里，不做过多介绍，网上一堆可参考的教程。\n\n# 部署到Github Pages\n\n这一节的内容可以参考Hexo官方文档中[部署部分](https://hexo.io/zh-cn/docs/deployment.html)，我这里分三个步骤讲解。\n\n1. 运行如下命令，安装[hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)。\n``` bash\n$ npm install hexo-deployer-git --save\n```\n2. 然后打开Hexo主文件夹(备注：hexo init命令设置的那个文件夹）中的_config.yml, 设置其中的deploy参数，以我的为例，设置的内容如下：\n```\ndeploy:\n  type: git\n  repo: https://github.com/lightmen/lightmen.github.io.git\n  branch: master\n```\n\n3. 然后在当前目录下，打开终端，输入下面命令，将网站部署到服务器上：\n``` bash\n$ hexo d\n```\n随后，按照提示输入github的账号和密码，上传文件。网站部署到服务区后，就可以通过 https://yourname.github.io/ 来访问自己刚刚上传的网站。\n\n# 添加新文章\n\n在网站中添加文章，通过运行以下命令创建POST：\n``` bash\n$ hexo n “your post name”\n$ hexo g\n$ hexo s\n```\n然后可以在浏览器查看修改的内容。\n\n打开Hexo主文件夹下的source 目录，所有的文章都会以md形式保存在_post文件夹中，只要在 _post文件夹中新建md类型的文档，就能在执行hexo g的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：\n```\ntitle: hello-world   //在此处添加你的标题。\ndate: 2017-03-18 22:15:29   //在此处输入你编辑这篇文章的时间。\ncategories: Exercise   //在此处输入这篇文章的分类。\ntoc: true  //在此处设定是否开启目录，需要主题支持。\n```\n\n# 进阶\n如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂。我们还可以进行一些设置主题、更换域名等操作，调整自己的博客，这部分内容待续。\n\n参考文档：\n\n- [使用Hexo搭建个人博客](http://www.jianshu.com/p/f4dce0e76886)\n\n- [史上最详细的Hexo博客搭建图文教程](https://xuanwo.org/2015/03/26/hexo-intor/)\n\n- [手把手教你使用Hexo + Github Pages搭建个人独立博客](https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/)\n\n- [Hexo使用指南](http://www.jianshu.com/p/84a8384be1ae)\n\n\n","slug":"环境搭建/Hexo + Github Pages搭建个人博客","published":1,"date":"2017-03-19T06:10:12.000Z","updated":"2017-03-25T13:49:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0pbne670000enrr3dnf1kpk","content":"<h1 id=\"关于Hexo与Github-Pages\"><a href=\"#关于Hexo与Github-Pages\" class=\"headerlink\" title=\"关于Hexo与Github Pages\"></a>关于Hexo与Github Pages</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"external\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>而Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io或者自定义域名来发布站点。</p>\n<p>利用Github Pages和Hexo，我们可以搭建自己的博客网站，可以参考示例: <a href=\"https://lightmen.github.io/\" target=\"_blank\" rel=\"external\">lightmen.github.io</a>。接下来我将分步骤介绍如何用GitHub Pages和Hexo搭建个人网站。</p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><p>安装Hexo很简单，但是在安装前，必须确保你的电脑中已安装下列两个应用程序:</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a></li>\n</ul>\n<p>(备注：在终端中输入 npm 命令可以验证电脑中是否安装了Node.js，输入git命令可以验证是否安装了Git，如果没有安装相应的程序，属于npm或者git命令，终端会提示找不到该命令)。</p>\n<p>如果您的电脑中已经安装了上述两个程序，那么恭喜你！接下来你只需要在终端中输入如下命令就可以完成 Hexo 的安装：<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p> Hexo安装完成后，接下来在指定文件夹中新建需要的文件，我们可以假设有个hexo目录，然后在该目录里面创建一个blog文件：<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> hexo</div><div class=\"line\">$ mkdir blog</div><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ <span class=\"built_in\">cd</span> blog</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p> 新建完成后，在blog目录下面会生成如下文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure></p>\n<p>这些文件的具体释义，参考 hexo.io官网中<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">配置</a>一节, 这里不做过多解释。</p>\n<p>继续操作，在终端中输入如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure></p>\n<p>提示: “Hexo is running at <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>. “  在浏览器中打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>, 你将会看到:<br><img src=\"http://note.youdao.com/yws/api/personal/file/WEB109a2e85adcbf21b729cc70c8df2ef85?method=download&amp;shareKey=e3cf0fdd4ce77bfbc0dcf0b559f3a529\" alt=\"landscape\"></p>\n<p>至此，Hexo的本地配置基本完成。</p>\n<h1 id=\"配置Github-Pages\"><a href=\"#配置Github-Pages\" class=\"headerlink\" title=\"配置Github Pages\"></a>配置Github Pages</h1><p>配置Github Pages，首先你得有个github账号，如果没有，请进入 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub网站</a>注册，登陆进去。</p>\n<p>登陆网站后，在网站右上角的”+”图标那里，点击 “<a href=\"https://github.com/new\" target=\"_blank\" rel=\"external\">New repository</a>“, 创建一个仓库。仓库名必须为你的用户名＋ github.io，比如我的github用户名为：lightmen， 那么我创建的仓库名就必须为：lightmen.github.io。 创建好后，可以试着在浏览器里面输入 <a href=\"https://yourname.github.io/\" target=\"_blank\" rel=\"external\">https://yourname.github.io/</a>, 确认是否可以正常访问(当然，刚刚创建的仓库，里面什么内容都没有，浏览器会显示空白)。</p>\n<p>另外，如果你是第一次使用github，你必须在本地配置好你的git环境，确保你可以往github上面的仓库传文件。这里，不做过多介绍，网上一堆可参考的教程。</p>\n<h1 id=\"部署到Github-Pages\"><a href=\"#部署到Github-Pages\" class=\"headerlink\" title=\"部署到Github Pages\"></a>部署到Github Pages</h1><p>这一节的内容可以参考Hexo官方文档中<a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"external\">部署部分</a>，我这里分三个步骤讲解。</p>\n<ol>\n<li><p>运行如下命令，安装<a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"external\">hexo-deployer-git</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后打开Hexo主文件夹(备注：hexo init命令设置的那个文件夹）中的_config.yml, 设置其中的deploy参数，以我的为例，设置的内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://github.com/lightmen/lightmen.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在当前目录下，打开终端，输入下面命令，将网站部署到服务器上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>随后，按照提示输入github的账号和密码，上传文件。网站部署到服务区后，就可以通过 <a href=\"https://yourname.github.io/\" target=\"_blank\" rel=\"external\">https://yourname.github.io/</a> 来访问自己刚刚上传的网站。</p>\n<h1 id=\"添加新文章\"><a href=\"#添加新文章\" class=\"headerlink\" title=\"添加新文章\"></a>添加新文章</h1><p>在网站中添加文章，通过运行以下命令创建POST：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo n “your post name”</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure></p>\n<p>然后可以在浏览器查看修改的内容。</p>\n<p>打开Hexo主文件夹下的source 目录，所有的文章都会以md形式保存在_post文件夹中，只要在 _post文件夹中新建md类型的文档，就能在执行hexo g的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: hello-world   //在此处添加你的标题。</div><div class=\"line\">date: 2017-03-18 22:15:29   //在此处输入你编辑这篇文章的时间。</div><div class=\"line\">categories: Exercise   //在此处输入这篇文章的分类。</div><div class=\"line\">toc: true  //在此处设定是否开启目录，需要主题支持。</div></pre></td></tr></table></figure></p>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><p>如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂。我们还可以进行一些设置主题、更换域名等操作，调整自己的博客，这部分内容待续。</p>\n<p>参考文档：</p>\n<ul>\n<li><p><a href=\"http://www.jianshu.com/p/f4dce0e76886\" target=\"_blank\" rel=\"external\">使用Hexo搭建个人博客</a></p>\n</li>\n<li><p><a href=\"https://xuanwo.org/2015/03/26/hexo-intor/\" target=\"_blank\" rel=\"external\">史上最详细的Hexo博客搭建图文教程</a></p>\n</li>\n<li><p><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"external\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/84a8384be1ae\" target=\"_blank\" rel=\"external\">Hexo使用指南</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"关于Hexo与Github-Pages\"><a href=\"#关于Hexo与Github-Pages\" class=\"headerlink\" title=\"关于Hexo与Github Pages\"></a>关于Hexo与Github Pages</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>而Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io或者自定义域名来发布站点。</p>\n<p>利用Github Pages和Hexo，我们可以搭建自己的博客网站，可以参考示例: <a href=\"https://lightmen.github.io/\">lightmen.github.io</a>。接下来我将分步骤介绍如何用GitHub Pages和Hexo搭建个人网站。</p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><p>安装Hexo很简单，但是在安装前，必须确保你的电脑中已安装下列两个应用程序:</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\">Node.js</a></li>\n<li><a href=\"https://git-scm.com/\">Git</a></li>\n</ul>\n<p>(备注：在终端中输入 npm 命令可以验证电脑中是否安装了Node.js，输入git命令可以验证是否安装了Git，如果没有安装相应的程序，属于npm或者git命令，终端会提示找不到该命令)。</p>\n<p>如果您的电脑中已经安装了上述两个程序，那么恭喜你！接下来你只需要在终端中输入如下命令就可以完成 Hexo 的安装：<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p> Hexo安装完成后，接下来在指定文件夹中新建需要的文件，我们可以假设有个hexo目录，然后在该目录里面创建一个blog文件：<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> hexo</div><div class=\"line\">$ mkdir blog</div><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ <span class=\"built_in\">cd</span> blog</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p> 新建完成后，在blog目录下面会生成如下文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure></p>\n<p>这些文件的具体释义，参考 hexo.io官网中<a href=\"https://hexo.io/zh-cn/docs/configuration.html\">配置</a>一节, 这里不做过多解释。</p>\n<p>继续操作，在终端中输入如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure></p>\n<p>提示: “Hexo is running at <a href=\"http://localhost:4000/\">http://localhost:4000/</a>. “  在浏览器中打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a>, 你将会看到:<br><img src=\"http://note.youdao.com/yws/api/personal/file/WEB109a2e85adcbf21b729cc70c8df2ef85?method=download&amp;shareKey=e3cf0fdd4ce77bfbc0dcf0b559f3a529\" alt=\"landscape\"></p>\n<p>至此，Hexo的本地配置基本完成。</p>\n<h1 id=\"配置Github-Pages\"><a href=\"#配置Github-Pages\" class=\"headerlink\" title=\"配置Github Pages\"></a>配置Github Pages</h1><p>配置Github Pages，首先你得有个github账号，如果没有，请进入 <a href=\"https://github.com/\">GitHub网站</a>注册，登陆进去。</p>\n<p>登陆网站后，在网站右上角的”+”图标那里，点击 “<a href=\"https://github.com/new\">New repository</a>“, 创建一个仓库。仓库名必须为你的用户名＋ github.io，比如我的github用户名为：lightmen， 那么我创建的仓库名就必须为：lightmen.github.io。 创建好后，可以试着在浏览器里面输入 <a href=\"https://yourname.github.io/\">https://yourname.github.io/</a>, 确认是否可以正常访问(当然，刚刚创建的仓库，里面什么内容都没有，浏览器会显示空白)。</p>\n<p>另外，如果你是第一次使用github，你必须在本地配置好你的git环境，确保你可以往github上面的仓库传文件。这里，不做过多介绍，网上一堆可参考的教程。</p>\n<h1 id=\"部署到Github-Pages\"><a href=\"#部署到Github-Pages\" class=\"headerlink\" title=\"部署到Github Pages\"></a>部署到Github Pages</h1><p>这一节的内容可以参考Hexo官方文档中<a href=\"https://hexo.io/zh-cn/docs/deployment.html\">部署部分</a>，我这里分三个步骤讲解。</p>\n<ol>\n<li><p>运行如下命令，安装<a href=\"https://github.com/hexojs/hexo-deployer-git\">hexo-deployer-git</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后打开Hexo主文件夹(备注：hexo init命令设置的那个文件夹）中的_config.yml, 设置其中的deploy参数，以我的为例，设置的内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://github.com/lightmen/lightmen.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在当前目录下，打开终端，输入下面命令，将网站部署到服务器上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>随后，按照提示输入github的账号和密码，上传文件。网站部署到服务区后，就可以通过 <a href=\"https://yourname.github.io/\">https://yourname.github.io/</a> 来访问自己刚刚上传的网站。</p>\n<h1 id=\"添加新文章\"><a href=\"#添加新文章\" class=\"headerlink\" title=\"添加新文章\"></a>添加新文章</h1><p>在网站中添加文章，通过运行以下命令创建POST：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo n “your post name”</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure></p>\n<p>然后可以在浏览器查看修改的内容。</p>\n<p>打开Hexo主文件夹下的source 目录，所有的文章都会以md形式保存在_post文件夹中，只要在 _post文件夹中新建md类型的文档，就能在执行hexo g的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: hello-world   //在此处添加你的标题。</div><div class=\"line\">date: 2017-03-18 22:15:29   //在此处输入你编辑这篇文章的时间。</div><div class=\"line\">categories: Exercise   //在此处输入这篇文章的分类。</div><div class=\"line\">toc: true  //在此处设定是否开启目录，需要主题支持。</div></pre></td></tr></table></figure></p>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><p>如果成功完成了上述的全部步骤，恭喜你，你已经搭建了一个最为简单且基础的博客。但是这个博客还非常简单， 没有个人的定制，操作也比较复杂。我们还可以进行一些设置主题、更换域名等操作，调整自己的博客，这部分内容待续。</p>\n<p>参考文档：</p>\n<ul>\n<li><p><a href=\"http://www.jianshu.com/p/f4dce0e76886\">使用Hexo搭建个人博客</a></p>\n</li>\n<li><p><a href=\"https://xuanwo.org/2015/03/26/hexo-intor/\">史上最详细的Hexo博客搭建图文教程</a></p>\n</li>\n<li><p><a href=\"https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/\">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/84a8384be1ae\">Hexo使用指南</a></p>\n</li>\n</ul>\n"},{"title":"Hexo主题添加评论模块","_content":"\n在Hexo主题里面添加评论模块，可以让浏览博客的读者评论我们的文章。接下来，将介绍通过第三方评论系统多说，在Hexo主题里面添加评论模块。\n## 创建站点\n首先我们需要在[多说](http://duoshuo.com/)里面创建一个站点。具体步骤如下：\n1. 登陆多说（备注：不用注册，可以用微信扫描登陆），在首页选择“我要安装”\n2. 在“创建站点”，根据自己的情况，配置相关信息，其中，“站点地址”项要求填个人博客网站地址，比如我这里填的是 https://lightmen.github.io/， “多说域名”项比较重要，自己选个名字，例如我这里填的是 lightmen。\n\n## 配置Hexo主题_config.yml\n这一步需要配置Hexo主题里面的_config.yml文件，添加 duoshuo_shortname 字段（先搜索，如果有就不用），设置如下：\n```\nduoshuo_shortname: your-duoshuo-shortname\n```\n备注：your-duoshuo-shortname，是你在创建多说站点是，在“多说域名”项填的名字。\n比如我使用的是jacman，我需要打开 themes/jacman／_config.yml，加入如下一行：\n```\nduoshuo_shortname:    lightmen\n```\n\n至此，已经在Hexo主题里面添加完成评论模块了，接下来，可以在登陆自己的博客，检查在每篇文章后面，是否可以进行评论。如果可以，说明已经成功添加评论模块。\n\n最后，如需取消某个页面的评论，在md文件的front-matter中增加：\n```\ncomments: false\n```\n\n\n\n\n","source":"_posts/环境搭建/Hexo主题添加评论模块.md","raw":"---\ntitle: Hexo主题添加评论模块\ncategories: 环境搭建\ntags: Hexo\n---\n\n在Hexo主题里面添加评论模块，可以让浏览博客的读者评论我们的文章。接下来，将介绍通过第三方评论系统多说，在Hexo主题里面添加评论模块。\n## 创建站点\n首先我们需要在[多说](http://duoshuo.com/)里面创建一个站点。具体步骤如下：\n1. 登陆多说（备注：不用注册，可以用微信扫描登陆），在首页选择“我要安装”\n2. 在“创建站点”，根据自己的情况，配置相关信息，其中，“站点地址”项要求填个人博客网站地址，比如我这里填的是 https://lightmen.github.io/， “多说域名”项比较重要，自己选个名字，例如我这里填的是 lightmen。\n\n## 配置Hexo主题_config.yml\n这一步需要配置Hexo主题里面的_config.yml文件，添加 duoshuo_shortname 字段（先搜索，如果有就不用），设置如下：\n```\nduoshuo_shortname: your-duoshuo-shortname\n```\n备注：your-duoshuo-shortname，是你在创建多说站点是，在“多说域名”项填的名字。\n比如我使用的是jacman，我需要打开 themes/jacman／_config.yml，加入如下一行：\n```\nduoshuo_shortname:    lightmen\n```\n\n至此，已经在Hexo主题里面添加完成评论模块了，接下来，可以在登陆自己的博客，检查在每篇文章后面，是否可以进行评论。如果可以，说明已经成功添加评论模块。\n\n最后，如需取消某个页面的评论，在md文件的front-matter中增加：\n```\ncomments: false\n```\n\n\n\n\n","slug":"环境搭建/Hexo主题添加评论模块","published":1,"date":"2017-03-19T12:47:05.000Z","updated":"2017-03-25T13:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0pbne7h0001enrrb6bzef57","content":"<p>在Hexo主题里面添加评论模块，可以让浏览博客的读者评论我们的文章。接下来，将介绍通过第三方评论系统多说，在Hexo主题里面添加评论模块。</p>\n<h2 id=\"创建站点\"><a href=\"#创建站点\" class=\"headerlink\" title=\"创建站点\"></a>创建站点</h2><p>首先我们需要在<a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a>里面创建一个站点。具体步骤如下：</p>\n<ol>\n<li>登陆多说（备注：不用注册，可以用微信扫描登陆），在首页选择“我要安装”</li>\n<li>在“创建站点”，根据自己的情况，配置相关信息，其中，“站点地址”项要求填个人博客网站地址，比如我这里填的是 <a href=\"https://lightmen.github.io/，\" target=\"_blank\" rel=\"external\">https://lightmen.github.io/，</a> “多说域名”项比较重要，自己选个名字，例如我这里填的是 lightmen。</li>\n</ol>\n<h2 id=\"配置Hexo主题-config-yml\"><a href=\"#配置Hexo主题-config-yml\" class=\"headerlink\" title=\"配置Hexo主题_config.yml\"></a>配置Hexo主题_config.yml</h2><p>这一步需要配置Hexo主题里面的_config.yml文件，添加 duoshuo_shortname 字段（先搜索，如果有就不用），设置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname: your-duoshuo-shortname</div></pre></td></tr></table></figure></p>\n<p>备注：your-duoshuo-shortname，是你在创建多说站点是，在“多说域名”项填的名字。<br>比如我使用的是jacman，我需要打开 themes/jacman／_config.yml，加入如下一行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname:    lightmen</div></pre></td></tr></table></figure></p>\n<p>至此，已经在Hexo主题里面添加完成评论模块了，接下来，可以在登陆自己的博客，检查在每篇文章后面，是否可以进行评论。如果可以，说明已经成功添加评论模块。</p>\n<p>最后，如需取消某个页面的评论，在md文件的front-matter中增加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">comments: false</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>在Hexo主题里面添加评论模块，可以让浏览博客的读者评论我们的文章。接下来，将介绍通过第三方评论系统多说，在Hexo主题里面添加评论模块。</p>\n<h2 id=\"创建站点\"><a href=\"#创建站点\" class=\"headerlink\" title=\"创建站点\"></a>创建站点</h2><p>首先我们需要在<a href=\"http://duoshuo.com/\">多说</a>里面创建一个站点。具体步骤如下：</p>\n<ol>\n<li>登陆多说（备注：不用注册，可以用微信扫描登陆），在首页选择“我要安装”</li>\n<li>在“创建站点”，根据自己的情况，配置相关信息，其中，“站点地址”项要求填个人博客网站地址，比如我这里填的是 <a href=\"https://lightmen.github.io/，\">https://lightmen.github.io/，</a> “多说域名”项比较重要，自己选个名字，例如我这里填的是 lightmen。</li>\n</ol>\n<h2 id=\"配置Hexo主题-config-yml\"><a href=\"#配置Hexo主题-config-yml\" class=\"headerlink\" title=\"配置Hexo主题_config.yml\"></a>配置Hexo主题_config.yml</h2><p>这一步需要配置Hexo主题里面的_config.yml文件，添加 duoshuo_shortname 字段（先搜索，如果有就不用），设置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname: your-duoshuo-shortname</div></pre></td></tr></table></figure></p>\n<p>备注：your-duoshuo-shortname，是你在创建多说站点是，在“多说域名”项填的名字。<br>比如我使用的是jacman，我需要打开 themes/jacman／_config.yml，加入如下一行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname:    lightmen</div></pre></td></tr></table></figure></p>\n<p>至此，已经在Hexo主题里面添加完成评论模块了，接下来，可以在登陆自己的博客，检查在每篇文章后面，是否可以进行评论。如果可以，说明已经成功添加评论模块。</p>\n<p>最后，如需取消某个页面的评论，在md文件的front-matter中增加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">comments: false</div></pre></td></tr></table></figure></p>\n"},{"title":"Markdown图片居中的方法","_content":"\n有两种方法可以使Markdown中插入的图片居中：\n法一：\n```\n<div style=\"text-align:center\" markdown=\"1\">\n![image description](image url)\n</div>\n```\n\n\n示例：\n<div style=\"text-align:center\" markdown=\"1\">\n![SD Memory Card Architecture](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png)\n</div>\n\n\n法二：\n```\n<img src=\"\", alt= \"\" class=\"img-center\">\n```\n这里，在我的jacman主题下测试有效，img-center定义在我的Hexo主目录下的themes/jacman/source/css/_partial／article.styl文件里面。img-center 定义如下：\n```\n.img-center\n  display block \n  margin auto\n```\n\n或者\n```\n<img src=\"\" style=\"display:block;margin:auto\"/>\n```\n\n示例：\n\n<img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png\", alt=\"SD Memory Card Architecture\" style=\"display:block;margin:auto\">\n\n","source":"_posts/环境搭建/Markdown图片居中的方法.md","raw":"---\ntitle: Markdown图片居中的方法\ncategories: 环境搭建\ntags: \n- Hexo\n- Markdown\n---\n\n有两种方法可以使Markdown中插入的图片居中：\n法一：\n```\n<div style=\"text-align:center\" markdown=\"1\">\n![image description](image url)\n</div>\n```\n\n\n示例：\n<div style=\"text-align:center\" markdown=\"1\">\n![SD Memory Card Architecture](http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png)\n</div>\n\n\n法二：\n```\n<img src=\"\", alt= \"\" class=\"img-center\">\n```\n这里，在我的jacman主题下测试有效，img-center定义在我的Hexo主目录下的themes/jacman/source/css/_partial／article.styl文件里面。img-center 定义如下：\n```\n.img-center\n  display block \n  margin auto\n```\n\n或者\n```\n<img src=\"\" style=\"display:block;margin:auto\"/>\n```\n\n示例：\n\n<img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png\", alt=\"SD Memory Card Architecture\" style=\"display:block;margin:auto\">\n\n","slug":"环境搭建/Markdown图片居中的方法","published":1,"date":"2017-03-21T14:25:46.000Z","updated":"2017-03-25T13:49:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0pbne7t0004enrrmapjc0tz","content":"<p>有两种方法可以使Markdown中插入的图片居中：<br>法一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;text-align:center&quot; markdown=&quot;1&quot;&gt;</div><div class=\"line\">![image description](image url)</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>示例：</p>\n<div style=\"text-align:center\" markdown=\"1\"><br><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png\" alt=\"SD Memory Card Architecture\"><br></div>\n\n\n<p>法二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;&quot;, alt= &quot;&quot; class=&quot;img-center&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>这里，在我的jacman主题下测试有效，img-center定义在我的Hexo主目录下的themes/jacman/source/css/_partial／article.styl文件里面。img-center 定义如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.img-center</div><div class=\"line\">  display block </div><div class=\"line\">  margin auto</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;&quot; style=&quot;display:block;margin:auto&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<p>示例：</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png\" ,=\"\" alt=\"SD Memory Card Architecture\" style=\"display:block;margin:auto\"></p>\n","excerpt":"","more":"<p>有两种方法可以使Markdown中插入的图片居中：<br>法一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;text-align:center&quot; markdown=&quot;1&quot;&gt;</div><div class=\"line\">![image description](image url)</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>示例：</p>\n<div style=\"text-align:center\" markdown=\"1\"><br><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png\" alt=\"SD Memory Card Architecture\"><br></div>\n\n\n<p>法二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;&quot;, alt= &quot;&quot; class=&quot;img-center&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>这里，在我的jacman主题下测试有效，img-center定义在我的Hexo主目录下的themes/jacman/source/css/_partial／article.styl文件里面。img-center 定义如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.img-center</div><div class=\"line\">  display block </div><div class=\"line\">  margin auto</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;&quot; style=&quot;display:block;margin:auto&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<p>示例：</p>\n<p><img src=\"http://on61oh42c.bkt.clouddn.com/SD-Memory-Card-Architecture.png\", alt=\"SD Memory Card Architecture\" style=\"display:block;margin:auto\"></p>\n"},{"title":"本地挂载android ext4镜像","_content":"\nandroid系统的data.img、system.img等ext4打包的镜像是可以挂载到本地PC环境的，方法如下：\n```\n$ simg2img system.img system.raw.img\n$ sudo mount -t ext4 -o loop system.raw.img ./my_system  \n```\n\n首先unpack system.raw.img文件，然后用mount即可。\n(注意：如果ubuntu中没有simg2img的话，输入sudo apt-get install android-tools-fsutils安装)\n\nWindows下可以下载一个simg2img_win.rar的包文件\n\n\n","source":"_posts/本地挂载android ext4镜像.md","raw":"---\ntitle: 本地挂载android ext4镜像\ncategories: \ntags:\n- android\n- ext4\n---\n\nandroid系统的data.img、system.img等ext4打包的镜像是可以挂载到本地PC环境的，方法如下：\n```\n$ simg2img system.img system.raw.img\n$ sudo mount -t ext4 -o loop system.raw.img ./my_system  \n```\n\n首先unpack system.raw.img文件，然后用mount即可。\n(注意：如果ubuntu中没有simg2img的话，输入sudo apt-get install android-tools-fsutils安装)\n\nWindows下可以下载一个simg2img_win.rar的包文件\n\n\n","slug":"本地挂载android ext4镜像","published":1,"date":"2017-03-25T14:18:47.000Z","updated":"2017-03-25T14:19:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0pcdjw50000f1rr4x65pulp","content":"<p>android系统的data.img、system.img等ext4打包的镜像是可以挂载到本地PC环境的，方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ simg2img system.img system.raw.img</div><div class=\"line\">$ sudo mount -t ext4 -o loop system.raw.img ./my_system</div></pre></td></tr></table></figure></p>\n<p>首先unpack system.raw.img文件，然后用mount即可。<br>(注意：如果ubuntu中没有simg2img的话，输入sudo apt-get install android-tools-fsutils安装)</p>\n<p>Windows下可以下载一个simg2img_win.rar的包文件</p>\n","excerpt":"","more":"<p>android系统的data.img、system.img等ext4打包的镜像是可以挂载到本地PC环境的，方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ simg2img system.img system.raw.img</div><div class=\"line\">$ sudo mount -t ext4 -o loop system.raw.img ./my_system</div></pre></td></tr></table></figure></p>\n<p>首先unpack system.raw.img文件，然后用mount即可。<br>(注意：如果ubuntu中没有simg2img的话，输入sudo apt-get install android-tools-fsutils安装)</p>\n<p>Windows下可以下载一个simg2img_win.rar的包文件</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0jly9wp0005sdrr1nmb078i","category_id":"cj0jly9wy000asdrr2l047d7x","_id":"cj0jly9x2000fsdrrdmmab45t"},{"post_id":"cj0jly9y2000ksdrrhj1o1vga","category_id":"cj0jly9y9000msdrrvzo129q6","_id":"cj0jly9yc000qsdrrxvn8aja0"},{"post_id":"cj0jly9y3000lsdrrqo04a4v0","category_id":"cj0jly9y9000msdrrvzo129q6","_id":"cj0jly9yd000ssdrrufnlqwok"},{"post_id":"cj0kwuzud0000ptrrg45zb7yk","category_id":"cj0kwxciq0000q6rrk2nkydm4","_id":"cj0kwxcit0001q6rrquuqz9nk"},{"post_id":"cj0pbne670000enrr3dnf1kpk","category_id":"cj0pbne7m0002enrr2i3ygiqq","_id":"cj0pbne7y0009enrry13log5y"},{"post_id":"cj0pbne7h0001enrrb6bzef57","category_id":"cj0pbne7m0002enrr2i3ygiqq","_id":"cj0pbne80000benrr5tc4rh9g"},{"post_id":"cj0pbne7t0004enrrmapjc0tz","category_id":"cj0pbne7m0002enrr2i3ygiqq","_id":"cj0pbne80000cenrr2z0m71ap"}],"PostTag":[{"post_id":"cj0jly9wp0005sdrr1nmb078i","tag_id":"cj0jly9wy000bsdrr47py01t9","_id":"cj0jly9x6000hsdrrg2keeu2u"},{"post_id":"cj0jly9wp0005sdrr1nmb078i","tag_id":"cj0jly9x1000esdrrww37weyf","_id":"cj0jly9x9000isdrr54xz2ixa"},{"post_id":"cj0jly9y2000ksdrrhj1o1vga","tag_id":"cj0jly9ya000nsdrrp4o0ogl3","_id":"cj0jly9yf000vsdrruerlptxf"},{"post_id":"cj0jly9y2000ksdrrhj1o1vga","tag_id":"cj0jly9yb000psdrreue4nz7s","_id":"cj0jly9yf000wsdrrzmvoniy5"},{"post_id":"cj0jly9y2000ksdrrhj1o1vga","tag_id":"cj0jly9yd000rsdrrranc5ti5","_id":"cj0jly9yg000ysdrrmf02ec7n"},{"post_id":"cj0jly9y2000ksdrrhj1o1vga","tag_id":"cj0jly9yd000tsdrre9dc2y70","_id":"cj0jly9yg000zsdrrnb2cfnl7"},{"post_id":"cj0jly9y3000lsdrrqo04a4v0","tag_id":"cj0jly9ya000nsdrrp4o0ogl3","_id":"cj0jly9yj0013sdrr11szcktt"},{"post_id":"cj0jly9y3000lsdrrqo04a4v0","tag_id":"cj0jly9yb000psdrreue4nz7s","_id":"cj0jly9yj0014sdrrz8mxueww"},{"post_id":"cj0jly9y3000lsdrrqo04a4v0","tag_id":"cj0jly9yd000rsdrrranc5ti5","_id":"cj0jly9yj0015sdrrj50xx7il"},{"post_id":"cj0jly9y3000lsdrrqo04a4v0","tag_id":"cj0jly9yd000tsdrre9dc2y70","_id":"cj0jly9yj0016sdrrnr8ywvn9"},{"post_id":"cj0jly9y3000lsdrrqo04a4v0","tag_id":"cj0jly9yi0012sdrrrxr40k0g","_id":"cj0jly9yj0017sdrrb0s4j28i"},{"post_id":"cj0kwuzud0000ptrrg45zb7yk","tag_id":"cj0jly9x1000esdrrww37weyf","_id":"cj0kwuzyz0005ptrrd0dpclie"},{"post_id":"cj0kwuzud0000ptrrg45zb7yk","tag_id":"cj0kwuzyr0001ptrrraha54sj","_id":"cj0kwuzyz0006ptrry4ipke5f"},{"post_id":"cj0jly9wp0005sdrr1nmb078i","tag_id":"cj0kwuzyr0001ptrrraha54sj","_id":"cj0kwuzyz0007ptrrk3sfdr4u"},{"post_id":"cj0kwuzud0000ptrrg45zb7yk","tag_id":"cj0kwynga0000qdrr1ayzz0h7","_id":"cj0kwyngh0001qdrr6vmmfn4i"},{"post_id":"cj0pbne670000enrr3dnf1kpk","tag_id":"cj0jly9wo0004sdrryrpifpdm","_id":"cj0pbne7t0003enrrt4kzc4n4"},{"post_id":"cj0pbne7h0001enrrb6bzef57","tag_id":"cj0jly9wo0004sdrryrpifpdm","_id":"cj0pbne7v0005enrrtce3w2la"},{"post_id":"cj0pbne7t0004enrrmapjc0tz","tag_id":"cj0jly9wo0004sdrryrpifpdm","_id":"cj0pbne7w0006enrr81w6we27"},{"post_id":"cj0pbne7t0004enrrmapjc0tz","tag_id":"cj0jndtg40001ugrr9pxqak0d","_id":"cj0pbne7y0008enrrkmxnx6ce"},{"post_id":"cj0pcdjw50000f1rr4x65pulp","tag_id":"cj0pcdjyc0001f1rrfv9ud1z3","_id":"cj0pcdjyi0003f1rr51v2n6tu"},{"post_id":"cj0pcdjw50000f1rr4x65pulp","tag_id":"cj0pcdjyf0002f1rr2gc2f9a7","_id":"cj0pcdjyi0004f1rrzj0ii4xn"}],"Tag":[{"name":"Hexo","_id":"cj0jly9wo0004sdrryrpifpdm"},{"name":"SD卡协议","_id":"cj0jly9wy000bsdrr47py01t9"},{"name":"Linux","_id":"cj0jly9x1000esdrrww37weyf"},{"name":"内核","_id":"cj0jly9x2000gsdrrpf1pja2b"},{"name":"Leetcode","_id":"cj0jly9ya000nsdrrp4o0ogl3"},{"name":"C/C++","_id":"cj0jly9yb000psdrreue4nz7s"},{"name":"Python","_id":"cj0jly9yd000rsdrrranc5ti5"},{"name":"Algorithm","_id":"cj0jly9yd000tsdrre9dc2y70"},{"name":"贪心算法","_id":"cj0jly9yi0012sdrrrxr40k0g"},{"name":"Markdown","_id":"cj0jndtg40001ugrr9pxqak0d"},{"name":"kernel","_id":"cj0kwuzyr0001ptrrraha54sj"},{"name":"文件系统","_id":"cj0kwynga0000qdrr1ayzz0h7"},{"name":"android","_id":"cj0pcdjyc0001f1rrfv9ud1z3"},{"name":"ext4","_id":"cj0pcdjyf0002f1rr2gc2f9a7"}]}}